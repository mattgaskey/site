{"posts" :
	[
		{
			"title" : "Sticky Nav in React",
			"author" : "Matt Gaskey",
			"date" : "10/26/2017",
			"description" : "A blog post about wrestling JavaScript functions into React Components",
			"keywords" : "JavaScript, front end development, React, lifecycle, state, problem solving",
			"snippet" : "One of my main motivations for building this site is to familiarize myself with web technology, both new and old.  It gives me a chance to practice techniques for organizing my code and to be able to think about it both globally and locally.",
			"content" : "<article>\r\n  \t\t<h1 className='blog-header' id='Sticky_Nav_in_React_0'>Sticky Nav in React<\/h1>\r\n<p>One of my main motivations for building this site is to familiarize myself with web technology, both new and old.  It gives me a chance to practice techniques for organizing my code and to be able to think about it both globally and locally.<\/p>\r\n<p>For this reason, I build a lot of things in multiple environments and with multiple frameworks.  As a production model, it\u2019s quite inefficient, but for practice it\u2019s invaluable.  I try to learn most things in vanilla JavaScript (or CSS or SVG) so I get the fundamentals down pat.  Plus, everything that is possible with a library is possible with a vanilla version.  Libraries are there to make things smoother for the build process, but in the end the browser has to interpret JS.<\/p>\r\n<h2 className='blog-header2' id='Wax_On_Wax_Off_6'>Wax On, Wax Off<\/h2>\r\n<p>I am a firm believer in the power of Vanilla and try not to lean on libraries and frameworks.  Manipulating the DOM is one of the basic functions of JavaScript, and while libraries like jQuery remain popular, they are often <a href='http:\/\/youmightnotneedjquery.com\/'>not needed<\/a> to achieve simple DOM tasks.<\/p>\r\n<p>I recently followed one of Wes Bos\u2019s (how on Earth does he do them for free?) courses: <a href='https:\/\/javascript30.com'>JavaScript30<\/a>.  Through a series of 30 video lessons, you learn a lot of excellent techniques for efficient DOM manipulation.<\/p>\r\n<p>One of which is setting a so-called \u201Csticky\u201D navigation bar. If you haven\u2019t heard the term, an element is sticky if it remains in view while scrolling.  Navigation bars are an exceptionally good candidate to sticky-ness as they provide the user site context and at-hand functionality even on long pages.<\/p>\r\n<p>I won\u2019t outline the details of building the sticky nav here.  You should really take the course yourself. The basic idea goes something like this:<\/p>\r\n<ol>\r\n<li>Grab your <code>nav<\/code> element and set a <code>const<\/code> on the <code>offsetTop<\/code><\/li>\r\n<li>Add a scroll event listener to the <code>window<\/code><\/li>\r\n<li>Define the scroll event handler such that when <code>window.scrollY<\/code> is greater than <code>nav.offsetTop<\/code>, we add a class of <code>fixed-nav<\/code>.  We should also remove the class <code>window.scrollY<\/code> is less than or equal to <code>nav.offsetTop<\/code><\/li>\r\n<li>Define the <code>fixed-nav<\/code> class as <code>position: fixed<\/code> in our CSS<\/li>\r\n<\/ol>\r\n<Pen \r\n\thash='BwXGML'\r\n\tuser='mattgaskey'\r\n\tdefaultTab='result,js'\r\n\/>\r\n<p>Aside from allowing for supplemntary padding if elements exist above the navbar, that\u2019s pretty much it.<\/p>\r\n<h2 className='blog-header2' id='Paint_the_Fence_27'>Paint the Fence<\/h2>\r\n<p>This is a pretty cool thing to have in your toolbelt.  Even cooler is to have it as a reusable component, one of the main reasons React is such a popular framework.  Building this site in React means only having to build each part once, then combining the components according to the needs of the page.<\/p>\r\n<p>But, since React is a framework, and frameworks are by definition opinionated, there are a few things we need to solve before we can just import the above code into a React component.<\/p>\r\n<p>Let\u2019s take a look at what it takes to get the basic component built and rendering in our React app:<\/p>\r\n<Pen \r\n\thash='pWMqOQ'\r\n\tuser='mattgaskey'\r\n\tdefaultTab='result,js'\r\n\/>\r\n<p>Simple enough; we\u2019ve defined a React Component that returns the HTML elements that will be rendered to the DOM inside the <code>div id=&quot;app&quot;<\/code>.  So far so good. (I\u2019ve add the content to the main HTML for simplicity\u2019s sake.  Normally, this would be its own standalone component as well.)<\/p>\r\n<p>If we were going to stop there, it would probably be best just to write our Nav component as a <a href='https:\/\/reactjs.org\/docs\/components-and-props.html'>Stateless Functional Component<\/a> rather than a Class Component.  However, we\u2019re going to see that we have a few hurdles to overcome to integrate our sticky functionality.<\/p>\r\n<h2 className='blog-header2' id='Sand_the_Floor_42'>Sand the Floor<\/h2>\r\n<p>One of the specificities of React is that components are encapsulated.  This provides security in that altering a component should not alter other components or the app as a whole.  But this also means that components do not have access to the DOM.<\/p>\r\n<p>We saw in our Vanilla example that the trigger for attaching our <code>fixed-nav<\/code> class to our <code>nav<\/code> is a scroll event listener, which needs to live on the <code>window<\/code>.  We also need to target our <code>nav<\/code> element in the DOM to add our class <code>onScroll<\/code>.<\/p>\r\n<p>One of the cool things about the React <code>render()<\/code> method is that we can write Vanilla JavaScript right inside.  We are <code>return<\/code>ing the HTML, so why not add our JS before the <code>return<\/code>?<\/p>\r\n<p>Well, drop the first line from our Vanilla example into our component and <code>console.log<\/code> it.  The result is <code>null<\/code>.  We can\u2019t access the DOM from the <code>render()<\/code> method.<\/p>\r\n<p>We can attach the event listener to the <code>window<\/code> inside the <code>render()<\/code> method, set a variable to hold our class name and try to have the <code>nav<\/code> element\u2019s <code>className<\/code> set dynamically.  Unfortunately, while we can do all these things, they don\u2019t achieve the result we are looking for.  The scroll event is tracked and we can run a function that updates the class name, but our <code>nav<\/code> isn\u2019t receiving anything new.<\/p>\r\n<Pen\r\n\thash='ZXgwpE'\r\n\tuser='mattgaskey'\r\n\tdefaultTab='result,js'\r\n\/>\r\n<p>The problem is that React components got through a number of stages in their lifecycle.  To access components in the DOM and re-render them based on changes in their environment, React makes use of <a href='https:\/\/reactjs.org\/docs\/state-and-lifecycle.html'>State and Lifecycle Hooks<\/a>.<\/p>\r\n<p>State allows us to hold a data store for the App, or locally for Components. (Deciding where state should \u201Clive\u201D is one of the nuances of building with React and is beyond the scope of this post.) Lifecycle hooks allow us to access components before, during or after rendering or re-rendering (in a nutshell).<\/p>\r\n<h2 className='blog-header2' id='Sweep_the_leg_61'>Sweep the leg<\/h2>\r\n<p>We are going to make use of both local state and lifecycle hooks to set up our sticky nav component.  This is why we need our Nav component as a class instead of a plain function.  React classes allow us to assign local state and to access the lifecycle hooks.<\/p>\r\n<p>I\u2019m going to initiate <code>this.state<\/code> as an empty object.  We\u2019ll be updating this once we know for sure that the Nav component has been rendered to the DOM.  How do we know this?<\/p>\r\n<p>That\u2019s where the lifecycle hook <code>componentDidMount()<\/code> comes in.  For simplicity\u2019s sake, it\u2019s here that I\u2019m going to do most of the heavy lifting from our Vanilla JS example.  I\u2019ll target the <code>nav<\/code> element in the DOM, attach the scroll event listener to the <code>window<\/code> and store the <code>offsetTop<\/code> and <code>offsetHeight<\/code> of the navbar in the <code>state<\/code> object.<\/p>\r\n<p>I\u2019ve also written <code>handleScroll<\/code> as function that stores the <code>scrollY<\/code> poisition in the <code>state<\/code> object when called.  Here, we\u2019ll also handle our offset body padding to account for any content that might come before our navigation.<strong>*<\/strong>  (Notice the odd-looking call to <code>.bind()<\/code> inside the <code>constructor()<\/code> method.  This will allow us to preserve the meaning of <code>this<\/code> when we call our handler function in other parts of our component.)<\/p>\r\n<p>We are pretty much there with our sticky nav.  The only thing left to do is somehow toggle the class name <code>fixed-nav<\/code> on and off.  In Vanilla JS, our handler function could do that.  However, in React, there\u2019s not really a way to handle toggles without leveraging state.  Luckily, since we are essentially writing our HTML elements with JavaScript, we can put our class name logic directly into our HTML element.<\/p>\r\n<p>Though it might seem counterintuitive, this is really excercising one of the more powerful aspects of React.  Even though we are using JavaScript to write HTML, we are preserving a separation of concerns.  The state is kept out of the DOM, and DOM elements can be rendered and re-rendered (including their attributes) based on changes to that state, which are handled with pure functions.  It really is quite elegant.<\/p>\r\n<p>Coming back to the toggle, we can use a ternary operator to check the <code>window<\/code> scroll position against the top of our <code>nav<\/code> element, and apply the class name accordingly. This logic could also be placed in the event handler itself to either return the class name we need (in which case we assign the function call to the <code>className<\/code> property) or to set the class name to the state object (in which case we assign <code>this.state.classname<\/code> to the <code>className<\/code> property).<\/p>\r\n<p><strong>*<\/strong><em>We can also place this functionality into another lifecycle hook, <code>componentDidUpdate()<\/code>.  Since the state is constantly updating on scroll, this hook will allow us check the location of the <code>nav<\/code> while scrolling and update the padding as needed.<\/em><\/p>\r\n<Pen \r\n\thash='gGVEzb'\r\n\tuser='mattgaskey'\r\n\tdefaultTab='result,js'\r\n\/>\r\n<h2 className='blog-header2' id='Takedown_83'>Takedown<\/h2>\r\n<p>React components can be a bit daunting when coming from a Vanilla JavaScript world, but they have a solid foundation in modular component structure.  They help us preserve a separation of concerns while allowing for flexiblity and discouraging redundancy in building web apps.<\/p>\r\n<p>While it may take a bit more wrangling to get basic functionality like DOM manipulation to work properly inside of the React sphere, it shouldn\u2019t be seen as a hindrance. And of course, it should go without saying that not all projects are right for React or require the level of complexity React brings to the table.<\/p>\r\n<p>Whether or not frameworks like React or Angular will take over the Web remains to be seen.  But if they do, I\u2019ll be ready to apply my Vanilla knowledge upwards!<\/p>\r\n<\/article>"
		},
		{
			"title" : "Happy Accidents", 
			"author" : "Matt Gaskey", 
			"date" : "10/22/2017", 
			"description" : "A blog post about turning stupid coding mistakes into smart solutions", 
			"keywords" : "JavaScript, front end development, HTML, CSS, functions, problem solving",
			"snippet" : "Jumping into the world of web development has provided many opprtunities to make mistakes.  This is not a field where memorizing theory will get you very far. You have to dig in and get your fingers dirty and code, code, code.  Luckily, the web is chock full of consequence-free environments where beginners can practice the fundamentals without fear of taking down an entire client website.",
			"content" : "<article>\r\n  <h1 className='blog-header' id='happy-accidents'><strong>Happy Accidents<\/strong><\/h1>\r\n\t<h2 className='blog-header2' id='the-back-story'>The Back-Story<\/h2>\r\n\t<p>I&#39;ve been re-watching a lot of episodes of the classic Bob Ross painting series\r\n\t<a href='https:\/\/www.youtube.com\/user\/BobRossInc'><em>The Joy of Painting<\/em><\/a> lately.  \r\n\tMaybe it&#39;s the stress and pressure of wanting\r\n\tto dive into web development at this stage in my life that makes me reach out\r\n\tfor something calming at the end of the work day.  Maybe I&#39;m just really into \r\n\thappy little trees and clouds.<\/p>\r\n\t<p>Or perhaps Bob is the one true source of knowledge and wisdom.  <\/p>\r\n\t<p>I am inclinded to doubt the latter, but one of his many mantras has stuck with \r\n\tme over the past few weeks.  To quote the guru:<\/p>\r\n\t<blockquote>\r\n\t<p>In our world, there are no mistakes, only happy accidents.<\/p>\r\n\t<\/blockquote>\r\n\t<p>Of course, Bob (and I feel comfortable continuing on a first-name basis with\r\n\thim) is referring to the ease with which errant strokes can be reincorporated into\r\n\tother elements with his wet-on-wet oil painting technique.  However, we all know\r\n\tthat Bob was really trying to tell us not to be afraid to take chances, to \r\n\tmake mistakes, and maybe more importantly, to own those mistakes.  We should \r\n\tsee mistakes as accidents, and accidents as points of inspiration.<\/p>\r\n\t<p>Jumping into the world of web development has provided many opprtunities to make\r\n\tmistakes.  This is not a field where memorizing theory will get you very far.\r\n\tYou have to dig in and get your fingers dirty and code, code, code.  Luckily, the\r\n\tweb is chock full of consequence-free environments where beginners can practice\r\n\tthe fundamentals without fear of taking down an entire client website.<\/p>\r\n\t<h2 className='blog-header2' id='the-set-up'>The Set Up<\/h2>\r\n\t<p><a href='https:\/\/hackerrank.com'>HackerRank.com<\/a> has a set of challenges that will\r\n\tlet you have all the happy little JavaScript accidents you like.  I went through\r\n\tthem in a day&#39;s time (90% of them are quite fundamental) and one particular\r\n\tchallenge caused a real-life face palm.  (For the younger generation out there, \r\n\tpeople used to actually slap themselves in the forehead when they made stupid\r\n\tmistakes instead of tweeting out gifs.)<\/p>\r\n\t<p>Here&#39;s the gist of the task:<\/p>\r\n\t<blockquote>\r\n\t<p>We want to create nine buttons enclosed in a div, laid out so they form a 3x3 grid. Each button has a distinct\r\n\tlabel from 1 to 9, and the labels on the outer buttons must rotate in the clockwise direction each time we click\r\n\tthe middle button. <\/p>\r\n\t<p>Each element in the document must have an id, [whose]  initial innerHTML labels must have the following button ids:<\/p>\r\n\t<table border='1'>\r\n\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t\t<th>innerHTML<\/th>\r\n\t\t\t\t<th>id<\/th>\r\n\t\t\t<\/tr>\r\n\t\t<\/thead>\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>1<\/td>\r\n\t\t\t\t<td>btn1<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>2<\/td>\r\n\t\t\t\t<td>btn2<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>3<\/td>\r\n\t\t\t\t<td>btn3<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>4<\/td>\r\n\t\t\t\t<td>btn4<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>5<\/td>\r\n\t\t\t\t<td>btn5<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>6<\/td>\r\n\t\t\t\t<td>btn6<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>7<\/td>\r\n\t\t\t\t<td>btn7<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>8<\/td>\r\n\t\t\t\t<td>btn8<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>9<\/td>\r\n\t\t\t\t<td>btn9<\/td>\r\n\t\t\t<\/tr>\r\n\t\t<\/tbody>\r\n\t<\/table>\r\n\t<\/blockquote>\r\n\t<p>Sounds simple enough, right?  You essentially have a phone pad layout and when you \r\n\tclick the &#39;5&#39;, the other button texts rotate clockwise.  I immediately jumped in and\r\n\tset my html according to the spec:<\/p>\r\n\t<pre><code>{`\r\n<div id='btns' class='btns'>\r\n  <button class='btn' id='btn1'><span>1<\/span><\/button>\r\n  <button class='btn' id='btn2'><span>2<\/span><\/button>\r\n  <button class='btn' id='btn3'><span>3<\/span><\/button>\r\n  <button class='btn' id='btn4'><span>4<\/span><\/button>\r\n  <button class='btn' id='btn5'><span>5<\/span><\/button>\r\n  <button class='btn' id='btn6'><span>6<\/span><\/button>\r\n  <button class='btn' id='btn7'><span>7<\/span><\/button>\r\n  <button class='btn' id='btn8'><span>8<\/span><\/button>\r\n  <button class='btn' id='btn9'><span>9<\/span><\/button>\r\n<\/div>`}\r\n\t<\/code><\/pre>\r\n\t<p>I&#39;ve got my buttons, numbered 1 through 9 with corresponding ids.  Now I just need to \r\n\tattach a simple click listener to btn5 that will update the <code>.btn<\/code> class with a \r\n\t<code>transform: rotate(90deg)<\/code> on all the other buttons.  That way, I can handle the \r\n\trotation with pure CSS and my solution will be nice and JS-light:<\/p>\r\n\t<p>CSS:<\/p>`\r\n\t<pre><code>{`\r\n.btns {\r\n    width: 75%;\r\n}\r\n\r\n.btn {\r\n    width: 30%;\r\n    height: 48px;\r\n    font-size: 24px;\r\n}\r\n\r\n.btn > span {\r\n  display: inline-block;\r\n}`}\r\n\t<\/code><\/pre>\r\n\t<p>JS:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\nconst btns = document.querySelectorAll('button');\r\nlet rotation = 0;\r\n\r\nfunction rotateThem() {\r\n  rotation += 90;\r\n  btns.forEach(btn => {\r\n    if (btn.id !== 'btn5') {\r\n      btn.children[0].style = \\`transform: rotate($\\{rotation}deg)\\`;\r\n    }\r\n  });\r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<Pen \r\n\t\thash='boJoxB'\r\n\t\tuser='mattgaskey'\r\n\t\tdefaultTab='result'\r\n\t\/>\r\n\t<p>There!  That works beautifully!  Click the &#39;5&#39; and all the other numbers\r\n\trotate clockwise.  I was really proud of myself for jumping right in and\r\n\tcoding the thing from start to finish and getting a result with minimal\r\n\tGoogle-ing.  So I fire the code off for testing and...<\/p>\r\n\t<p>You probably guessed it long before this point in the story, FAIL!<\/p>\r\n\t<p>(<em>I did pass the CSS requirement, but that&#39;s small comfort when JS is the\r\n\tgoal<\/em>)<\/p>\r\n\t<h2 className='blog-header2' id='the-punch-line'>The Punch Line<\/h2>\r\n\t<p>How on Earth could I have failed?  There must have been something wrong with the testing module.  I mean, I did exactly what the task instructed me.  Click\r\n\tthe &#39;5&#39;, rotate all the others.  It does seem a bit inane of a task.  What&#39;s \r\n\tthe use in seeing a bunch of numbers spinning around in their little boxes\r\n\tanyway?<\/p>\r\n\t<p>I go back to the task, take a good look at what I should expect to see, and\r\n\tthe part of my brain responsible for involuntary reactions catches up with my\r\n\tvisual interpeter and lands my palm squarely against my forehead.<\/p>\r\n\t<p>One big &#39;happy accident&#39;.  Always read the instructions fully before beginning any\r\n\ttask.  Lesson number one from every grade starting in elementary school on\r\n\tthrough university.  Common sense.<\/p>\r\n\t<p>I&#39;m supposed to shift the number grid clockwise around the &#39;5&#39; when it&#39;s clicked.\r\n\tThat&#39;s a much more daunting task.  How the hell am I supposed to do that? I guess,\r\n\tit&#39;s back to the proverbial drawing board.<\/p>\r\n\t<p>At this point, my immature self would have given up.  I did a task that required not-so-elementary knowledge, used NodeLists, applied listeners, wrote functions, updated \r\n\tstyle with JavaScript; I even did it with ES6.  I think of Bob.  Bob says, &quot;Don&#39;t be \r\n\timmature. Remember, there are NO mistakes.&quot;<\/p>\r\n\t<p>You&#39;re right Bob.  Let&#39;s figure this thing out.  <\/p>\r\n\t<p>I&#39;ve already gotten a long way.  I succeeded in targeting a change in all the buttons\r\n\tother than the one that is clicked.  I can use that.  The structure is there, I just\r\n\tneed to redefine what change the function is affecting.<\/p>\r\n\t<p>First things first, I can get rid of those nested spans.  They were only there to act\r\n\tas containers to spin the text (you cannot rotate inline elements, hence the \r\n\t<code>display: inline-block<\/code>).  I should also consider what needs to happen onClick.  The innerHTML\r\n\tof the surrounding elements needs to change, leaving the ids in tact.  That means I can&#39;t\r\n\tupdate the <code>button<\/code> elements themselves.  <\/p>\r\n\t<p>The best way to approach this is going to be by dynamically inserting the innerHTML of each \r\n\telement and updating the data source when <code>btn5<\/code> is clicked.  That calls for an array.\r\n\tIt&#39;s probably also best to set a class on each changeable <code>button<\/code> element as well.  That\r\n\tgives us a new HTML markup:<\/p>\r\n\t<pre><code>{`\r\n<div id='btns' class='btns'>\r\n  <button class='btn rotating' id='btn1'><\/button>\r\n  <button class='btn rotating' id='btn2'><\/button>\r\n  <button class='btn rotating' id='btn3'><\/button>\r\n  <button class='btn rotating' id='btn4'><\/button>\r\n  <button class='btn' id='btn5'>5<\/button>\r\n  <button class='btn rotating' id='btn6'><\/button>\r\n  <button class='btn rotating' id='btn7'><\/button>\r\n  <button class='btn rotating' id='btn8'><\/button>\r\n  <button class='btn rotating' id='btn9'><\/button>\r\n<\/div>`}\r\n\t<\/code><\/pre>\r\n\t<p>Our CSS is unchanged.  We&#39;re still working with simple buttons.<\/p>\r\n\t<p>The JS has to be the star of the show now.  Our buttons no longer have any text.  We&#39;ve\r\n\tgot to write a function to loop over the HTML elements and set their <code>textContent<\/code> to the\r\n\tinitial values.  Plus we need an array of numbers to work from.<\/p>\r\n\t<pre><code>{`\r\n\/\/ use 'let' to initialize the variable, we're going\r\n\/\/ to be updating it as we rotate;\r\n\/\/ don't select btn5, it's value is\r\n\/\/ hard-coded in the HTML and won't change;\r\n\/\/ notice there is no '5' in the array either\r\n\r\nconst numbers = [1, 2, 3, 4, 6, 7, 8, 9];\r\nconst buttons = document.querySelectorAll('.rotating');\r\n\r\nfunction fillButtonContent(btn, i) {\r\n  btn.textContent = numbers[i];\r\n}\r\n\r\nbuttons.forEach((btn, i) => fillButtonContent(btn, i));`}\r\n\t<\/code><\/pre>\r\n\t<p>Our function is abstract, since we&#39;ll need to call it multiple times.  Initially\r\n\tthough, calling <code>fillButtonContent<\/code> will loop over our <code>button<\/code> nodes and set\r\n\ta number from the array at each index <code>i<\/code> to the innerHTML.  This will give us\r\n\tthe phone dial pad setup we&#39;re looking for.<\/p>\r\n\t<p>Next, we need to add our event listener and define our event handler, both of\r\n\twhich we accomplished in our happy little accident before. This time, we&#39;ll need\r\n\tto look closer at what our handler is doing:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\n\r\nfunction rotateThem() {\r\n  \/\/ Do something to the numbers array\r\n  buttons.forEach((btn, i) => fillButtonContent(btn, i)); \r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<p>The mechanism is in place; we just need to figure out how to properly manipulate\r\n\tour array so that the numbers move around the &#39;5&#39; in a clockwise fashion.  My first \r\n\tthought was to simply pop the last value off the end of the array and move it to the\r\n\tfront.  This does achieve a <strong>cyclic<\/strong> pattern, but since our HTML elements are arranged\r\n\tleft-to-right, top-to-bottom, we cannot achieve a <strong>circular<\/strong> pattern with a <strong>linear<\/strong>\r\n\tchange.<\/p>\r\n\t<p>In layman&#39;s terms, the first time we click, the &#39;3&#39; should move where the &#39;6&#39; is, but \r\n\tit moves where the &#39;4&#39; is.  I have an interesting mind, but not a beautiful one, so \r\n\tthe proper algorithm doesn&#39;t jump right out at me.  I need to model the effect in order to \r\n\tunderstand the pattern.<\/p>\r\n\t<p>So, what do we expect to see after clicking?  Here&#39;s the lowdown:<\/p>\r\n\t<pre><code className='markdown'>{`\r\nInitial State:\r\n| 1 | 2 | 3 |\r\n| 4 | 5 | 6 |\r\n| 7 | 8 | 9 |\r\n\r\nAfter First Click:\r\n| 4 | 1 | 2 |\r\n| 7 | 5 | 3 |\r\n| 8 | 9 | 6 |\r\n\r\nAfter Second Click:\r\n| 7 | 4 | 1 |\r\n| 8 | 5 | 2 |\r\n| 9 | 6 | 3 |`}\r\n\t<\/code><\/pre>\r\n\t<p>I don&#39;t believe I can write a formula to model this pattern, but I can write a function!\r\n\tFirst, I need to see if the expected permutations have any kind of pattern when we update our array.  That is, does each click result in the same kind of change in the array?<\/p>\r\n\t<p>Let&#39;s see:<\/p>\r\n\t<pre><code>{`\r\nnumbers = [1, 2, 3, 4, 6, 7, 8, 9]\r\nnumbers = [4, 1, 2, 7, 3, 8, 9, 6]\r\nnumbers = [7, 4, 1, 8, 2, 9, 6, 3]`}\r\n\t<\/code><\/pre>\r\n\t<p>It may not jump out at you right away, but the expected values in the array after each click\r\n\tdo in fact follow a pattern.  That means we can write a simple function that will change\r\n\tthe numbers array in such a way that calling <code>fillButtonContent<\/code> with the updated\r\n\tarray will make the numbers travel around the &#39;5&#39; in a clockwise fashion!<\/p>\r\n\t<p>Let&#39;s write that function:<\/p>\r\n\t<pre><code>{`\r\nfunction enterTheMatrix(arr) {\r\n  let newArr = [];\r\n  newArr.push(arr[3]);\r\n  newArr.push(arr[0]);\r\n  newArr.push(arr[1]);\r\n  newArr.push(arr[5]);\r\n  newArr.push(arr[2]);\r\n  newArr.push(arr[6]);\r\n  newArr.push(arr[7]);\r\n  newArr.push(arr[4]);\r\n  return newArr;\r\n}`}\r\n\t<\/code><\/pre>\r\n\t<p>The function <code>enterTheMatrix<\/code> takes in our numbers array, builds a placeholder array,\r\n\tpushes values from the original array to our placeholder array using the pattern we saw\r\n\tin our model, then returns the new array.<\/p>\r\n\t<p>Putting the whole thing together we get:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\nconst buttons = document.querySelectorAll('.rotating');\r\nlet numbers = [1, 2, 3, 4, 6, 7, 8, 9];\r\n\r\nbuttons.forEach((btn, i) => fillButtonContent(btn, i));\r\n\r\nfunction rotateThem() {\r\n  numbers = enterTheMatrix(numbers);\r\n  buttons.forEach((btn, i) => fillButtonContent(btn, i)); \r\n}\r\n\r\nfunction fillButtonContent(btn, i) {\r\n  btn.textContent = numbers[i];\r\n}\r\n\r\nfunction enterTheMatrix(arr) {\r\n  let newArr = [];\r\n  newArr.push(arr[3]);\r\n  newArr.push(arr[0]);\r\n  newArr.push(arr[1]);\r\n  newArr.push(arr[5]);\r\n  newArr.push(arr[2]);\r\n  newArr.push(arr[6]);\r\n  newArr.push(arr[7]);\r\n  newArr.push(arr[4]);\r\n  return newArr;\r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<p>On page load, the buttons which will rotate are assigned an innerHTML value\r\n\tfrom the numbers array. We target our <code>btn5<\/code> and attach a click listener \r\n\twhich fires the event handler <code>rotateThem<\/code>.  The event handler runs <code>enterTheMatrix<\/code>, which gives us a new array.  We use that array to run our\r\n\toriginal <code>fillButtonContent<\/code> to update the button texts.<\/p>\r\n\t<p>And that&#39;s it!<\/p>\r\n\t<Pen \r\n\t\thash='GMLOqN'\r\n\t\tuser='mattgaskey'\r\n\t\tdefaultTab='result'\r\n\t\/>\r\n\t<h2 className='blog-header2' id='what-did-we-learn-'>What did we learn?<\/h2>\r\n\t<p>Well, first off, the major takeaway from our happy accident was to make sure\r\n\tto <strong>always<\/strong> understand your task before starting.  It might feel like diving\r\n\tin and getting your hands dirty is the best way to accomplish anything, but \r\n\ttaking a few minutes to understand what you need to accomplish can save a lot\r\n\tof time and headache down the road.<\/p>\r\n\t<p>Second, learn from your mistakes.  You make them, but they can&#39;t break you if\r\n\tyou analyze what you&#39;ve done wrong.  That may mean re-reading the requirements,\r\n\tGoogle-ing for help, scrolling forums or asking co-workers (highly recommended,\r\n\tif you have them).  Own your mistakes and they will begin to feel like self-\r\n\tteaching moments.<\/p>\r\n\t<p>Third, don&#39;t scrap everything.  A lot of what developers do is pattern-based.  If\r\n\tyou focus on coding in patterns, you set yourself up with strong frameworks on\r\n\twhich you build your code.  Any mistakes you make therein can usually be\r\n\tcorrected without having to start over from scratch.  There is no need to \r\n\tabandon a strong foundation, just because you rushed some execution.<\/p>\r\n\t<p>Finally, Bob Ross is eternal.<\/p>\r\n<\/article>"
		},
		{
			"title" : "Happy Accidents", 
			"author" : "Matt Gaskey", 
			"date" : "10/22/2017", 
			"description" : "A blog post about turning stupid coding mistakes into smart solutions", 
			"keywords" : "JavaScript, front end development, HTML, CSS, functions, problem solving",
			"snippet" : "Jumping into the world of web development has provided many opprtunities to make mistakes.  This is not a field where memorizing theory will get you very far. You have to dig in and get your fingers dirty and code, code, code.  Luckily, the web is chock full of consequence-free environments where beginners can practice the fundamentals without fear of taking down an entire client website.",
			"content" : "<article>\r\n  <h1 className='blog-header' id='happy-accidents'><strong>Happy Accidents<\/strong><\/h1>\r\n\t<h2 className='blog-header2' id='the-back-story'>The Back-Story<\/h2>\r\n\t<p>I&#39;ve been re-watching a lot of episodes of the classic Bob Ross painting series\r\n\t<a href='https:\/\/www.youtube.com\/user\/BobRossInc'><em>The Joy of Painting<\/em><\/a> lately.  \r\n\tMaybe it&#39;s the stress and pressure of wanting\r\n\tto dive into web development at this stage in my life that makes me reach out\r\n\tfor something calming at the end of the work day.  Maybe I&#39;m just really into \r\n\thappy little trees and clouds.<\/p>\r\n\t<p>Or perhaps Bob is the one true source of knowledge and wisdom.  <\/p>\r\n\t<p>I am inclinded to doubt the latter, but one of his many mantras has stuck with \r\n\tme over the past few weeks.  To quote the guru:<\/p>\r\n\t<blockquote>\r\n\t<p>In our world, there are no mistakes, only happy accidents.<\/p>\r\n\t<\/blockquote>\r\n\t<p>Of course, Bob (and I feel comfortable continuing on a first-name basis with\r\n\thim) is referring to the ease with which errant strokes can be reincorporated into\r\n\tother elements with his wet-on-wet oil painting technique.  However, we all know\r\n\tthat Bob was really trying to tell us not to be afraid to take chances, to \r\n\tmake mistakes, and maybe more importantly, to own those mistakes.  We should \r\n\tsee mistakes as accidents, and accidents as points of inspiration.<\/p>\r\n\t<p>Jumping into the world of web development has provided many opprtunities to make\r\n\tmistakes.  This is not a field where memorizing theory will get you very far.\r\n\tYou have to dig in and get your fingers dirty and code, code, code.  Luckily, the\r\n\tweb is chock full of consequence-free environments where beginners can practice\r\n\tthe fundamentals without fear of taking down an entire client website.<\/p>\r\n\t<h2 className='blog-header2' id='the-set-up'>The Set Up<\/h2>\r\n\t<p><a href='https:\/\/hackerrank.com'>HackerRank.com<\/a> has a set of challenges that will\r\n\tlet you have all the happy little JavaScript accidents you like.  I went through\r\n\tthem in a day&#39;s time (90% of them are quite fundamental) and one particular\r\n\tchallenge caused a real-life face palm.  (For the younger generation out there, \r\n\tpeople used to actually slap themselves in the forehead when they made stupid\r\n\tmistakes instead of tweeting out gifs.)<\/p>\r\n\t<p>Here&#39;s the gist of the task:<\/p>\r\n\t<blockquote>\r\n\t<p>We want to create nine buttons enclosed in a div, laid out so they form a 3x3 grid. Each button has a distinct\r\n\tlabel from 1 to 9, and the labels on the outer buttons must rotate in the clockwise direction each time we click\r\n\tthe middle button. <\/p>\r\n\t<p>Each element in the document must have an id, [whose]  initial innerHTML labels must have the following button ids:<\/p>\r\n\t<table border='1'>\r\n\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t\t<th>innerHTML<\/th>\r\n\t\t\t\t<th>id<\/th>\r\n\t\t\t<\/tr>\r\n\t\t<\/thead>\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>1<\/td>\r\n\t\t\t\t<td>btn1<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>2<\/td>\r\n\t\t\t\t<td>btn2<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>3<\/td>\r\n\t\t\t\t<td>btn3<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>4<\/td>\r\n\t\t\t\t<td>btn4<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>5<\/td>\r\n\t\t\t\t<td>btn5<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>6<\/td>\r\n\t\t\t\t<td>btn6<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>7<\/td>\r\n\t\t\t\t<td>btn7<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>8<\/td>\r\n\t\t\t\t<td>btn8<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>9<\/td>\r\n\t\t\t\t<td>btn9<\/td>\r\n\t\t\t<\/tr>\r\n\t\t<\/tbody>\r\n\t<\/table>\r\n\t<\/blockquote>\r\n\t<p>Sounds simple enough, right?  You essentially have a phone pad layout and when you \r\n\tclick the &#39;5&#39;, the other button texts rotate clockwise.  I immediately jumped in and\r\n\tset my html according to the spec:<\/p>\r\n\t<pre><code>{`\r\n<div id='btns' class='btns'>\r\n  <button class='btn' id='btn1'><span>1<\/span><\/button>\r\n  <button class='btn' id='btn2'><span>2<\/span><\/button>\r\n  <button class='btn' id='btn3'><span>3<\/span><\/button>\r\n  <button class='btn' id='btn4'><span>4<\/span><\/button>\r\n  <button class='btn' id='btn5'><span>5<\/span><\/button>\r\n  <button class='btn' id='btn6'><span>6<\/span><\/button>\r\n  <button class='btn' id='btn7'><span>7<\/span><\/button>\r\n  <button class='btn' id='btn8'><span>8<\/span><\/button>\r\n  <button class='btn' id='btn9'><span>9<\/span><\/button>\r\n<\/div>`}\r\n\t<\/code><\/pre>\r\n\t<p>I&#39;ve got my buttons, numbered 1 through 9 with corresponding ids.  Now I just need to \r\n\tattach a simple click listener to btn5 that will update the <code>.btn<\/code> class with a \r\n\t<code>transform: rotate(90deg)<\/code> on all the other buttons.  That way, I can handle the \r\n\trotation with pure CSS and my solution will be nice and JS-light:<\/p>\r\n\t<p>CSS:<\/p>`\r\n\t<pre><code>{`\r\n.btns {\r\n    width: 75%;\r\n}\r\n\r\n.btn {\r\n    width: 30%;\r\n    height: 48px;\r\n    font-size: 24px;\r\n}\r\n\r\n.btn > span {\r\n  display: inline-block;\r\n}`}\r\n\t<\/code><\/pre>\r\n\t<p>JS:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\nconst btns = document.querySelectorAll('button');\r\nlet rotation = 0;\r\n\r\nfunction rotateThem() {\r\n  rotation += 90;\r\n  btns.forEach(btn => {\r\n    if (btn.id !== 'btn5') {\r\n      btn.children[0].style = \\`transform: rotate($\\{rotation}deg)\\`;\r\n    }\r\n  });\r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<Pen \r\n\t\thash='boJoxB'\r\n\t\tuser='mattgaskey'\r\n\t\tdefaultTab='result'\r\n\t\/>\r\n\t<p>There!  That works beautifully!  Click the &#39;5&#39; and all the other numbers\r\n\trotate clockwise.  I was really proud of myself for jumping right in and\r\n\tcoding the thing from start to finish and getting a result with minimal\r\n\tGoogle-ing.  So I fire the code off for testing and...<\/p>\r\n\t<p>You probably guessed it long before this point in the story, FAIL!<\/p>\r\n\t<p>(<em>I did pass the CSS requirement, but that&#39;s small comfort when JS is the\r\n\tgoal<\/em>)<\/p>\r\n\t<h2 className='blog-header2' id='the-punch-line'>The Punch Line<\/h2>\r\n\t<p>How on Earth could I have failed?  There must have been something wrong with the testing module.  I mean, I did exactly what the task instructed me.  Click\r\n\tthe &#39;5&#39;, rotate all the others.  It does seem a bit inane of a task.  What&#39;s \r\n\tthe use in seeing a bunch of numbers spinning around in their little boxes\r\n\tanyway?<\/p>\r\n\t<p>I go back to the task, take a good look at what I should expect to see, and\r\n\tthe part of my brain responsible for involuntary reactions catches up with my\r\n\tvisual interpeter and lands my palm squarely against my forehead.<\/p>\r\n\t<p>One big &#39;happy accident&#39;.  Always read the instructions fully before beginning any\r\n\ttask.  Lesson number one from every grade starting in elementary school on\r\n\tthrough university.  Common sense.<\/p>\r\n\t<p>I&#39;m supposed to shift the number grid clockwise around the &#39;5&#39; when it&#39;s clicked.\r\n\tThat&#39;s a much more daunting task.  How the hell am I supposed to do that? I guess,\r\n\tit&#39;s back to the proverbial drawing board.<\/p>\r\n\t<p>At this point, my immature self would have given up.  I did a task that required not-so-elementary knowledge, used NodeLists, applied listeners, wrote functions, updated \r\n\tstyle with JavaScript; I even did it with ES6.  I think of Bob.  Bob says, &quot;Don&#39;t be \r\n\timmature. Remember, there are NO mistakes.&quot;<\/p>\r\n\t<p>You&#39;re right Bob.  Let&#39;s figure this thing out.  <\/p>\r\n\t<p>I&#39;ve already gotten a long way.  I succeeded in targeting a change in all the buttons\r\n\tother than the one that is clicked.  I can use that.  The structure is there, I just\r\n\tneed to redefine what change the function is affecting.<\/p>\r\n\t<p>First things first, I can get rid of those nested spans.  They were only there to act\r\n\tas containers to spin the text (you cannot rotate inline elements, hence the \r\n\t<code>display: inline-block<\/code>).  I should also consider what needs to happen onClick.  The innerHTML\r\n\tof the surrounding elements needs to change, leaving the ids in tact.  That means I can&#39;t\r\n\tupdate the <code>button<\/code> elements themselves.  <\/p>\r\n\t<p>The best way to approach this is going to be by dynamically inserting the innerHTML of each \r\n\telement and updating the data source when <code>btn5<\/code> is clicked.  That calls for an array.\r\n\tIt&#39;s probably also best to set a class on each changeable <code>button<\/code> element as well.  That\r\n\tgives us a new HTML markup:<\/p>\r\n\t<pre><code>{`\r\n<div id='btns' class='btns'>\r\n  <button class='btn rotating' id='btn1'><\/button>\r\n  <button class='btn rotating' id='btn2'><\/button>\r\n  <button class='btn rotating' id='btn3'><\/button>\r\n  <button class='btn rotating' id='btn4'><\/button>\r\n  <button class='btn' id='btn5'>5<\/button>\r\n  <button class='btn rotating' id='btn6'><\/button>\r\n  <button class='btn rotating' id='btn7'><\/button>\r\n  <button class='btn rotating' id='btn8'><\/button>\r\n  <button class='btn rotating' id='btn9'><\/button>\r\n<\/div>`}\r\n\t<\/code><\/pre>\r\n\t<p>Our CSS is unchanged.  We&#39;re still working with simple buttons.<\/p>\r\n\t<p>The JS has to be the star of the show now.  Our buttons no longer have any text.  We&#39;ve\r\n\tgot to write a function to loop over the HTML elements and set their <code>textContent<\/code> to the\r\n\tinitial values.  Plus we need an array of numbers to work from.<\/p>\r\n\t<pre><code>{`\r\n\/\/ use 'let' to initialize the variable, we're going\r\n\/\/ to be updating it as we rotate;\r\n\/\/ don't select btn5, it's value is\r\n\/\/ hard-coded in the HTML and won't change;\r\n\/\/ notice there is no '5' in the array either\r\n\r\nconst numbers = [1, 2, 3, 4, 6, 7, 8, 9];\r\nconst buttons = document.querySelectorAll('.rotating');\r\n\r\nfunction fillButtonContent(btn, i) {\r\n  btn.textContent = numbers[i];\r\n}\r\n\r\nbuttons.forEach((btn, i) => fillButtonContent(btn, i));`}\r\n\t<\/code><\/pre>\r\n\t<p>Our function is abstract, since we&#39;ll need to call it multiple times.  Initially\r\n\tthough, calling <code>fillButtonContent<\/code> will loop over our <code>button<\/code> nodes and set\r\n\ta number from the array at each index <code>i<\/code> to the innerHTML.  This will give us\r\n\tthe phone dial pad setup we&#39;re looking for.<\/p>\r\n\t<p>Next, we need to add our event listener and define our event handler, both of\r\n\twhich we accomplished in our happy little accident before. This time, we&#39;ll need\r\n\tto look closer at what our handler is doing:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\n\r\nfunction rotateThem() {\r\n  \/\/ Do something to the numbers array\r\n  buttons.forEach((btn, i) => fillButtonContent(btn, i)); \r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<p>The mechanism is in place; we just need to figure out how to properly manipulate\r\n\tour array so that the numbers move around the &#39;5&#39; in a clockwise fashion.  My first \r\n\tthought was to simply pop the last value off the end of the array and move it to the\r\n\tfront.  This does achieve a <strong>cyclic<\/strong> pattern, but since our HTML elements are arranged\r\n\tleft-to-right, top-to-bottom, we cannot achieve a <strong>circular<\/strong> pattern with a <strong>linear<\/strong>\r\n\tchange.<\/p>\r\n\t<p>In layman&#39;s terms, the first time we click, the &#39;3&#39; should move where the &#39;6&#39; is, but \r\n\tit moves where the &#39;4&#39; is.  I have an interesting mind, but not a beautiful one, so \r\n\tthe proper algorithm doesn&#39;t jump right out at me.  I need to model the effect in order to \r\n\tunderstand the pattern.<\/p>\r\n\t<p>So, what do we expect to see after clicking?  Here&#39;s the lowdown:<\/p>\r\n\t<pre><code className='markdown'>{`\r\nInitial State:\r\n| 1 | 2 | 3 |\r\n| 4 | 5 | 6 |\r\n| 7 | 8 | 9 |\r\n\r\nAfter First Click:\r\n| 4 | 1 | 2 |\r\n| 7 | 5 | 3 |\r\n| 8 | 9 | 6 |\r\n\r\nAfter Second Click:\r\n| 7 | 4 | 1 |\r\n| 8 | 5 | 2 |\r\n| 9 | 6 | 3 |`}\r\n\t<\/code><\/pre>\r\n\t<p>I don&#39;t believe I can write a formula to model this pattern, but I can write a function!\r\n\tFirst, I need to see if the expected permutations have any kind of pattern when we update our array.  That is, does each click result in the same kind of change in the array?<\/p>\r\n\t<p>Let&#39;s see:<\/p>\r\n\t<pre><code>{`\r\nnumbers = [1, 2, 3, 4, 6, 7, 8, 9]\r\nnumbers = [4, 1, 2, 7, 3, 8, 9, 6]\r\nnumbers = [7, 4, 1, 8, 2, 9, 6, 3]`}\r\n\t<\/code><\/pre>\r\n\t<p>It may not jump out at you right away, but the expected values in the array after each click\r\n\tdo in fact follow a pattern.  That means we can write a simple function that will change\r\n\tthe numbers array in such a way that calling <code>fillButtonContent<\/code> with the updated\r\n\tarray will make the numbers travel around the &#39;5&#39; in a clockwise fashion!<\/p>\r\n\t<p>Let&#39;s write that function:<\/p>\r\n\t<pre><code>{`\r\nfunction enterTheMatrix(arr) {\r\n  let newArr = [];\r\n  newArr.push(arr[3]);\r\n  newArr.push(arr[0]);\r\n  newArr.push(arr[1]);\r\n  newArr.push(arr[5]);\r\n  newArr.push(arr[2]);\r\n  newArr.push(arr[6]);\r\n  newArr.push(arr[7]);\r\n  newArr.push(arr[4]);\r\n  return newArr;\r\n}`}\r\n\t<\/code><\/pre>\r\n\t<p>The function <code>enterTheMatrix<\/code> takes in our numbers array, builds a placeholder array,\r\n\tpushes values from the original array to our placeholder array using the pattern we saw\r\n\tin our model, then returns the new array.<\/p>\r\n\t<p>Putting the whole thing together we get:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\nconst buttons = document.querySelectorAll('.rotating');\r\nlet numbers = [1, 2, 3, 4, 6, 7, 8, 9];\r\n\r\nbuttons.forEach((btn, i) => fillButtonContent(btn, i));\r\n\r\nfunction rotateThem() {\r\n  numbers = enterTheMatrix(numbers);\r\n  buttons.forEach((btn, i) => fillButtonContent(btn, i)); \r\n}\r\n\r\nfunction fillButtonContent(btn, i) {\r\n  btn.textContent = numbers[i];\r\n}\r\n\r\nfunction enterTheMatrix(arr) {\r\n  let newArr = [];\r\n  newArr.push(arr[3]);\r\n  newArr.push(arr[0]);\r\n  newArr.push(arr[1]);\r\n  newArr.push(arr[5]);\r\n  newArr.push(arr[2]);\r\n  newArr.push(arr[6]);\r\n  newArr.push(arr[7]);\r\n  newArr.push(arr[4]);\r\n  return newArr;\r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<p>On page load, the buttons which will rotate are assigned an innerHTML value\r\n\tfrom the numbers array. We target our <code>btn5<\/code> and attach a click listener \r\n\twhich fires the event handler <code>rotateThem<\/code>.  The event handler runs <code>enterTheMatrix<\/code>, which gives us a new array.  We use that array to run our\r\n\toriginal <code>fillButtonContent<\/code> to update the button texts.<\/p>\r\n\t<p>And that&#39;s it!<\/p>\r\n\t<Pen \r\n\t\thash='GMLOqN'\r\n\t\tuser='mattgaskey'\r\n\t\tdefaultTab='result'\r\n\t\/>\r\n\t<h2 className='blog-header2' id='what-did-we-learn-'>What did we learn?<\/h2>\r\n\t<p>Well, first off, the major takeaway from our happy accident was to make sure\r\n\tto <strong>always<\/strong> understand your task before starting.  It might feel like diving\r\n\tin and getting your hands dirty is the best way to accomplish anything, but \r\n\ttaking a few minutes to understand what you need to accomplish can save a lot\r\n\tof time and headache down the road.<\/p>\r\n\t<p>Second, learn from your mistakes.  You make them, but they can&#39;t break you if\r\n\tyou analyze what you&#39;ve done wrong.  That may mean re-reading the requirements,\r\n\tGoogle-ing for help, scrolling forums or asking co-workers (highly recommended,\r\n\tif you have them).  Own your mistakes and they will begin to feel like self-\r\n\tteaching moments.<\/p>\r\n\t<p>Third, don&#39;t scrap everything.  A lot of what developers do is pattern-based.  If\r\n\tyou focus on coding in patterns, you set yourself up with strong frameworks on\r\n\twhich you build your code.  Any mistakes you make therein can usually be\r\n\tcorrected without having to start over from scratch.  There is no need to \r\n\tabandon a strong foundation, just because you rushed some execution.<\/p>\r\n\t<p>Finally, Bob Ross is eternal.<\/p>\r\n<\/article>"
		},
		{
			"title" : "Happy Accidents", 
			"author" : "Matt Gaskey", 
			"date" : "10/22/2017", 
			"description" : "A blog post about turning stupid coding mistakes into smart solutions", 
			"keywords" : "JavaScript, front end development, HTML, CSS, functions, problem solving",
			"snippet" : "Jumping into the world of web development has provided many opprtunities to make mistakes.  This is not a field where memorizing theory will get you very far. You have to dig in and get your fingers dirty and code, code, code.  Luckily, the web is chock full of consequence-free environments where beginners can practice the fundamentals without fear of taking down an entire client website.",
			"content" : "<article>\r\n  <h1 className='blog-header' id='happy-accidents'><strong>Happy Accidents<\/strong><\/h1>\r\n\t<h2 className='blog-header2' id='the-back-story'>The Back-Story<\/h2>\r\n\t<p>I&#39;ve been re-watching a lot of episodes of the classic Bob Ross painting series\r\n\t<a href='https:\/\/www.youtube.com\/user\/BobRossInc'><em>The Joy of Painting<\/em><\/a> lately.  \r\n\tMaybe it&#39;s the stress and pressure of wanting\r\n\tto dive into web development at this stage in my life that makes me reach out\r\n\tfor something calming at the end of the work day.  Maybe I&#39;m just really into \r\n\thappy little trees and clouds.<\/p>\r\n\t<p>Or perhaps Bob is the one true source of knowledge and wisdom.  <\/p>\r\n\t<p>I am inclinded to doubt the latter, but one of his many mantras has stuck with \r\n\tme over the past few weeks.  To quote the guru:<\/p>\r\n\t<blockquote>\r\n\t<p>In our world, there are no mistakes, only happy accidents.<\/p>\r\n\t<\/blockquote>\r\n\t<p>Of course, Bob (and I feel comfortable continuing on a first-name basis with\r\n\thim) is referring to the ease with which errant strokes can be reincorporated into\r\n\tother elements with his wet-on-wet oil painting technique.  However, we all know\r\n\tthat Bob was really trying to tell us not to be afraid to take chances, to \r\n\tmake mistakes, and maybe more importantly, to own those mistakes.  We should \r\n\tsee mistakes as accidents, and accidents as points of inspiration.<\/p>\r\n\t<p>Jumping into the world of web development has provided many opprtunities to make\r\n\tmistakes.  This is not a field where memorizing theory will get you very far.\r\n\tYou have to dig in and get your fingers dirty and code, code, code.  Luckily, the\r\n\tweb is chock full of consequence-free environments where beginners can practice\r\n\tthe fundamentals without fear of taking down an entire client website.<\/p>\r\n\t<h2 className='blog-header2' id='the-set-up'>The Set Up<\/h2>\r\n\t<p><a href='https:\/\/hackerrank.com'>HackerRank.com<\/a> has a set of challenges that will\r\n\tlet you have all the happy little JavaScript accidents you like.  I went through\r\n\tthem in a day&#39;s time (90% of them are quite fundamental) and one particular\r\n\tchallenge caused a real-life face palm.  (For the younger generation out there, \r\n\tpeople used to actually slap themselves in the forehead when they made stupid\r\n\tmistakes instead of tweeting out gifs.)<\/p>\r\n\t<p>Here&#39;s the gist of the task:<\/p>\r\n\t<blockquote>\r\n\t<p>We want to create nine buttons enclosed in a div, laid out so they form a 3x3 grid. Each button has a distinct\r\n\tlabel from 1 to 9, and the labels on the outer buttons must rotate in the clockwise direction each time we click\r\n\tthe middle button. <\/p>\r\n\t<p>Each element in the document must have an id, [whose]  initial innerHTML labels must have the following button ids:<\/p>\r\n\t<table border='1'>\r\n\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t\t<th>innerHTML<\/th>\r\n\t\t\t\t<th>id<\/th>\r\n\t\t\t<\/tr>\r\n\t\t<\/thead>\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>1<\/td>\r\n\t\t\t\t<td>btn1<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>2<\/td>\r\n\t\t\t\t<td>btn2<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>3<\/td>\r\n\t\t\t\t<td>btn3<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>4<\/td>\r\n\t\t\t\t<td>btn4<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>5<\/td>\r\n\t\t\t\t<td>btn5<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>6<\/td>\r\n\t\t\t\t<td>btn6<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>7<\/td>\r\n\t\t\t\t<td>btn7<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>8<\/td>\r\n\t\t\t\t<td>btn8<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>9<\/td>\r\n\t\t\t\t<td>btn9<\/td>\r\n\t\t\t<\/tr>\r\n\t\t<\/tbody>\r\n\t<\/table>\r\n\t<\/blockquote>\r\n\t<p>Sounds simple enough, right?  You essentially have a phone pad layout and when you \r\n\tclick the &#39;5&#39;, the other button texts rotate clockwise.  I immediately jumped in and\r\n\tset my html according to the spec:<\/p>\r\n\t<pre><code>{`\r\n<div id='btns' class='btns'>\r\n  <button class='btn' id='btn1'><span>1<\/span><\/button>\r\n  <button class='btn' id='btn2'><span>2<\/span><\/button>\r\n  <button class='btn' id='btn3'><span>3<\/span><\/button>\r\n  <button class='btn' id='btn4'><span>4<\/span><\/button>\r\n  <button class='btn' id='btn5'><span>5<\/span><\/button>\r\n  <button class='btn' id='btn6'><span>6<\/span><\/button>\r\n  <button class='btn' id='btn7'><span>7<\/span><\/button>\r\n  <button class='btn' id='btn8'><span>8<\/span><\/button>\r\n  <button class='btn' id='btn9'><span>9<\/span><\/button>\r\n<\/div>`}\r\n\t<\/code><\/pre>\r\n\t<p>I&#39;ve got my buttons, numbered 1 through 9 with corresponding ids.  Now I just need to \r\n\tattach a simple click listener to btn5 that will update the <code>.btn<\/code> class with a \r\n\t<code>transform: rotate(90deg)<\/code> on all the other buttons.  That way, I can handle the \r\n\trotation with pure CSS and my solution will be nice and JS-light:<\/p>\r\n\t<p>CSS:<\/p>`\r\n\t<pre><code>{`\r\n.btns {\r\n    width: 75%;\r\n}\r\n\r\n.btn {\r\n    width: 30%;\r\n    height: 48px;\r\n    font-size: 24px;\r\n}\r\n\r\n.btn > span {\r\n  display: inline-block;\r\n}`}\r\n\t<\/code><\/pre>\r\n\t<p>JS:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\nconst btns = document.querySelectorAll('button');\r\nlet rotation = 0;\r\n\r\nfunction rotateThem() {\r\n  rotation += 90;\r\n  btns.forEach(btn => {\r\n    if (btn.id !== 'btn5') {\r\n      btn.children[0].style = \\`transform: rotate($\\{rotation}deg)\\`;\r\n    }\r\n  });\r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<Pen \r\n\t\thash='boJoxB'\r\n\t\tuser='mattgaskey'\r\n\t\tdefaultTab='result'\r\n\t\/>\r\n\t<p>There!  That works beautifully!  Click the &#39;5&#39; and all the other numbers\r\n\trotate clockwise.  I was really proud of myself for jumping right in and\r\n\tcoding the thing from start to finish and getting a result with minimal\r\n\tGoogle-ing.  So I fire the code off for testing and...<\/p>\r\n\t<p>You probably guessed it long before this point in the story, FAIL!<\/p>\r\n\t<p>(<em>I did pass the CSS requirement, but that&#39;s small comfort when JS is the\r\n\tgoal<\/em>)<\/p>\r\n\t<h2 className='blog-header2' id='the-punch-line'>The Punch Line<\/h2>\r\n\t<p>How on Earth could I have failed?  There must have been something wrong with the testing module.  I mean, I did exactly what the task instructed me.  Click\r\n\tthe &#39;5&#39;, rotate all the others.  It does seem a bit inane of a task.  What&#39;s \r\n\tthe use in seeing a bunch of numbers spinning around in their little boxes\r\n\tanyway?<\/p>\r\n\t<p>I go back to the task, take a good look at what I should expect to see, and\r\n\tthe part of my brain responsible for involuntary reactions catches up with my\r\n\tvisual interpeter and lands my palm squarely against my forehead.<\/p>\r\n\t<p>One big &#39;happy accident&#39;.  Always read the instructions fully before beginning any\r\n\ttask.  Lesson number one from every grade starting in elementary school on\r\n\tthrough university.  Common sense.<\/p>\r\n\t<p>I&#39;m supposed to shift the number grid clockwise around the &#39;5&#39; when it&#39;s clicked.\r\n\tThat&#39;s a much more daunting task.  How the hell am I supposed to do that? I guess,\r\n\tit&#39;s back to the proverbial drawing board.<\/p>\r\n\t<p>At this point, my immature self would have given up.  I did a task that required not-so-elementary knowledge, used NodeLists, applied listeners, wrote functions, updated \r\n\tstyle with JavaScript; I even did it with ES6.  I think of Bob.  Bob says, &quot;Don&#39;t be \r\n\timmature. Remember, there are NO mistakes.&quot;<\/p>\r\n\t<p>You&#39;re right Bob.  Let&#39;s figure this thing out.  <\/p>\r\n\t<p>I&#39;ve already gotten a long way.  I succeeded in targeting a change in all the buttons\r\n\tother than the one that is clicked.  I can use that.  The structure is there, I just\r\n\tneed to redefine what change the function is affecting.<\/p>\r\n\t<p>First things first, I can get rid of those nested spans.  They were only there to act\r\n\tas containers to spin the text (you cannot rotate inline elements, hence the \r\n\t<code>display: inline-block<\/code>).  I should also consider what needs to happen onClick.  The innerHTML\r\n\tof the surrounding elements needs to change, leaving the ids in tact.  That means I can&#39;t\r\n\tupdate the <code>button<\/code> elements themselves.  <\/p>\r\n\t<p>The best way to approach this is going to be by dynamically inserting the innerHTML of each \r\n\telement and updating the data source when <code>btn5<\/code> is clicked.  That calls for an array.\r\n\tIt&#39;s probably also best to set a class on each changeable <code>button<\/code> element as well.  That\r\n\tgives us a new HTML markup:<\/p>\r\n\t<pre><code>{`\r\n<div id='btns' class='btns'>\r\n  <button class='btn rotating' id='btn1'><\/button>\r\n  <button class='btn rotating' id='btn2'><\/button>\r\n  <button class='btn rotating' id='btn3'><\/button>\r\n  <button class='btn rotating' id='btn4'><\/button>\r\n  <button class='btn' id='btn5'>5<\/button>\r\n  <button class='btn rotating' id='btn6'><\/button>\r\n  <button class='btn rotating' id='btn7'><\/button>\r\n  <button class='btn rotating' id='btn8'><\/button>\r\n  <button class='btn rotating' id='btn9'><\/button>\r\n<\/div>`}\r\n\t<\/code><\/pre>\r\n\t<p>Our CSS is unchanged.  We&#39;re still working with simple buttons.<\/p>\r\n\t<p>The JS has to be the star of the show now.  Our buttons no longer have any text.  We&#39;ve\r\n\tgot to write a function to loop over the HTML elements and set their <code>textContent<\/code> to the\r\n\tinitial values.  Plus we need an array of numbers to work from.<\/p>\r\n\t<pre><code>{`\r\n\/\/ use 'let' to initialize the variable, we're going\r\n\/\/ to be updating it as we rotate;\r\n\/\/ don't select btn5, it's value is\r\n\/\/ hard-coded in the HTML and won't change;\r\n\/\/ notice there is no '5' in the array either\r\n\r\nconst numbers = [1, 2, 3, 4, 6, 7, 8, 9];\r\nconst buttons = document.querySelectorAll('.rotating');\r\n\r\nfunction fillButtonContent(btn, i) {\r\n  btn.textContent = numbers[i];\r\n}\r\n\r\nbuttons.forEach((btn, i) => fillButtonContent(btn, i));`}\r\n\t<\/code><\/pre>\r\n\t<p>Our function is abstract, since we&#39;ll need to call it multiple times.  Initially\r\n\tthough, calling <code>fillButtonContent<\/code> will loop over our <code>button<\/code> nodes and set\r\n\ta number from the array at each index <code>i<\/code> to the innerHTML.  This will give us\r\n\tthe phone dial pad setup we&#39;re looking for.<\/p>\r\n\t<p>Next, we need to add our event listener and define our event handler, both of\r\n\twhich we accomplished in our happy little accident before. This time, we&#39;ll need\r\n\tto look closer at what our handler is doing:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\n\r\nfunction rotateThem() {\r\n  \/\/ Do something to the numbers array\r\n  buttons.forEach((btn, i) => fillButtonContent(btn, i)); \r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<p>The mechanism is in place; we just need to figure out how to properly manipulate\r\n\tour array so that the numbers move around the &#39;5&#39; in a clockwise fashion.  My first \r\n\tthought was to simply pop the last value off the end of the array and move it to the\r\n\tfront.  This does achieve a <strong>cyclic<\/strong> pattern, but since our HTML elements are arranged\r\n\tleft-to-right, top-to-bottom, we cannot achieve a <strong>circular<\/strong> pattern with a <strong>linear<\/strong>\r\n\tchange.<\/p>\r\n\t<p>In layman&#39;s terms, the first time we click, the &#39;3&#39; should move where the &#39;6&#39; is, but \r\n\tit moves where the &#39;4&#39; is.  I have an interesting mind, but not a beautiful one, so \r\n\tthe proper algorithm doesn&#39;t jump right out at me.  I need to model the effect in order to \r\n\tunderstand the pattern.<\/p>\r\n\t<p>So, what do we expect to see after clicking?  Here&#39;s the lowdown:<\/p>\r\n\t<pre><code className='markdown'>{`\r\nInitial State:\r\n| 1 | 2 | 3 |\r\n| 4 | 5 | 6 |\r\n| 7 | 8 | 9 |\r\n\r\nAfter First Click:\r\n| 4 | 1 | 2 |\r\n| 7 | 5 | 3 |\r\n| 8 | 9 | 6 |\r\n\r\nAfter Second Click:\r\n| 7 | 4 | 1 |\r\n| 8 | 5 | 2 |\r\n| 9 | 6 | 3 |`}\r\n\t<\/code><\/pre>\r\n\t<p>I don&#39;t believe I can write a formula to model this pattern, but I can write a function!\r\n\tFirst, I need to see if the expected permutations have any kind of pattern when we update our array.  That is, does each click result in the same kind of change in the array?<\/p>\r\n\t<p>Let&#39;s see:<\/p>\r\n\t<pre><code>{`\r\nnumbers = [1, 2, 3, 4, 6, 7, 8, 9]\r\nnumbers = [4, 1, 2, 7, 3, 8, 9, 6]\r\nnumbers = [7, 4, 1, 8, 2, 9, 6, 3]`}\r\n\t<\/code><\/pre>\r\n\t<p>It may not jump out at you right away, but the expected values in the array after each click\r\n\tdo in fact follow a pattern.  That means we can write a simple function that will change\r\n\tthe numbers array in such a way that calling <code>fillButtonContent<\/code> with the updated\r\n\tarray will make the numbers travel around the &#39;5&#39; in a clockwise fashion!<\/p>\r\n\t<p>Let&#39;s write that function:<\/p>\r\n\t<pre><code>{`\r\nfunction enterTheMatrix(arr) {\r\n  let newArr = [];\r\n  newArr.push(arr[3]);\r\n  newArr.push(arr[0]);\r\n  newArr.push(arr[1]);\r\n  newArr.push(arr[5]);\r\n  newArr.push(arr[2]);\r\n  newArr.push(arr[6]);\r\n  newArr.push(arr[7]);\r\n  newArr.push(arr[4]);\r\n  return newArr;\r\n}`}\r\n\t<\/code><\/pre>\r\n\t<p>The function <code>enterTheMatrix<\/code> takes in our numbers array, builds a placeholder array,\r\n\tpushes values from the original array to our placeholder array using the pattern we saw\r\n\tin our model, then returns the new array.<\/p>\r\n\t<p>Putting the whole thing together we get:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\nconst buttons = document.querySelectorAll('.rotating');\r\nlet numbers = [1, 2, 3, 4, 6, 7, 8, 9];\r\n\r\nbuttons.forEach((btn, i) => fillButtonContent(btn, i));\r\n\r\nfunction rotateThem() {\r\n  numbers = enterTheMatrix(numbers);\r\n  buttons.forEach((btn, i) => fillButtonContent(btn, i)); \r\n}\r\n\r\nfunction fillButtonContent(btn, i) {\r\n  btn.textContent = numbers[i];\r\n}\r\n\r\nfunction enterTheMatrix(arr) {\r\n  let newArr = [];\r\n  newArr.push(arr[3]);\r\n  newArr.push(arr[0]);\r\n  newArr.push(arr[1]);\r\n  newArr.push(arr[5]);\r\n  newArr.push(arr[2]);\r\n  newArr.push(arr[6]);\r\n  newArr.push(arr[7]);\r\n  newArr.push(arr[4]);\r\n  return newArr;\r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<p>On page load, the buttons which will rotate are assigned an innerHTML value\r\n\tfrom the numbers array. We target our <code>btn5<\/code> and attach a click listener \r\n\twhich fires the event handler <code>rotateThem<\/code>.  The event handler runs <code>enterTheMatrix<\/code>, which gives us a new array.  We use that array to run our\r\n\toriginal <code>fillButtonContent<\/code> to update the button texts.<\/p>\r\n\t<p>And that&#39;s it!<\/p>\r\n\t<Pen \r\n\t\thash='GMLOqN'\r\n\t\tuser='mattgaskey'\r\n\t\tdefaultTab='result'\r\n\t\/>\r\n\t<h2 className='blog-header2' id='what-did-we-learn-'>What did we learn?<\/h2>\r\n\t<p>Well, first off, the major takeaway from our happy accident was to make sure\r\n\tto <strong>always<\/strong> understand your task before starting.  It might feel like diving\r\n\tin and getting your hands dirty is the best way to accomplish anything, but \r\n\ttaking a few minutes to understand what you need to accomplish can save a lot\r\n\tof time and headache down the road.<\/p>\r\n\t<p>Second, learn from your mistakes.  You make them, but they can&#39;t break you if\r\n\tyou analyze what you&#39;ve done wrong.  That may mean re-reading the requirements,\r\n\tGoogle-ing for help, scrolling forums or asking co-workers (highly recommended,\r\n\tif you have them).  Own your mistakes and they will begin to feel like self-\r\n\tteaching moments.<\/p>\r\n\t<p>Third, don&#39;t scrap everything.  A lot of what developers do is pattern-based.  If\r\n\tyou focus on coding in patterns, you set yourself up with strong frameworks on\r\n\twhich you build your code.  Any mistakes you make therein can usually be\r\n\tcorrected without having to start over from scratch.  There is no need to \r\n\tabandon a strong foundation, just because you rushed some execution.<\/p>\r\n\t<p>Finally, Bob Ross is eternal.<\/p>\r\n<\/article>"
		},
		{
			"title" : "Happy Accidents", 
			"author" : "Matt Gaskey", 
			"date" : "10/22/2017", 
			"description" : "A blog post about turning stupid coding mistakes into smart solutions", 
			"keywords" : "JavaScript, front end development, HTML, CSS, functions, problem solving",
			"snippet" : "Jumping into the world of web development has provided many opprtunities to make mistakes.  This is not a field where memorizing theory will get you very far. You have to dig in and get your fingers dirty and code, code, code.  Luckily, the web is chock full of consequence-free environments where beginners can practice the fundamentals without fear of taking down an entire client website.",
			"content" : "<article>\r\n  <h1 className='blog-header' id='happy-accidents'><strong>Happy Accidents<\/strong><\/h1>\r\n\t<h2 className='blog-header2' id='the-back-story'>The Back-Story<\/h2>\r\n\t<p>I&#39;ve been re-watching a lot of episodes of the classic Bob Ross painting series\r\n\t<a href='https:\/\/www.youtube.com\/user\/BobRossInc'><em>The Joy of Painting<\/em><\/a> lately.  \r\n\tMaybe it&#39;s the stress and pressure of wanting\r\n\tto dive into web development at this stage in my life that makes me reach out\r\n\tfor something calming at the end of the work day.  Maybe I&#39;m just really into \r\n\thappy little trees and clouds.<\/p>\r\n\t<p>Or perhaps Bob is the one true source of knowledge and wisdom.  <\/p>\r\n\t<p>I am inclinded to doubt the latter, but one of his many mantras has stuck with \r\n\tme over the past few weeks.  To quote the guru:<\/p>\r\n\t<blockquote>\r\n\t<p>In our world, there are no mistakes, only happy accidents.<\/p>\r\n\t<\/blockquote>\r\n\t<p>Of course, Bob (and I feel comfortable continuing on a first-name basis with\r\n\thim) is referring to the ease with which errant strokes can be reincorporated into\r\n\tother elements with his wet-on-wet oil painting technique.  However, we all know\r\n\tthat Bob was really trying to tell us not to be afraid to take chances, to \r\n\tmake mistakes, and maybe more importantly, to own those mistakes.  We should \r\n\tsee mistakes as accidents, and accidents as points of inspiration.<\/p>\r\n\t<p>Jumping into the world of web development has provided many opprtunities to make\r\n\tmistakes.  This is not a field where memorizing theory will get you very far.\r\n\tYou have to dig in and get your fingers dirty and code, code, code.  Luckily, the\r\n\tweb is chock full of consequence-free environments where beginners can practice\r\n\tthe fundamentals without fear of taking down an entire client website.<\/p>\r\n\t<h2 className='blog-header2' id='the-set-up'>The Set Up<\/h2>\r\n\t<p><a href='https:\/\/hackerrank.com'>HackerRank.com<\/a> has a set of challenges that will\r\n\tlet you have all the happy little JavaScript accidents you like.  I went through\r\n\tthem in a day&#39;s time (90% of them are quite fundamental) and one particular\r\n\tchallenge caused a real-life face palm.  (For the younger generation out there, \r\n\tpeople used to actually slap themselves in the forehead when they made stupid\r\n\tmistakes instead of tweeting out gifs.)<\/p>\r\n\t<p>Here&#39;s the gist of the task:<\/p>\r\n\t<blockquote>\r\n\t<p>We want to create nine buttons enclosed in a div, laid out so they form a 3x3 grid. Each button has a distinct\r\n\tlabel from 1 to 9, and the labels on the outer buttons must rotate in the clockwise direction each time we click\r\n\tthe middle button. <\/p>\r\n\t<p>Each element in the document must have an id, [whose]  initial innerHTML labels must have the following button ids:<\/p>\r\n\t<table border='1'>\r\n\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t\t<th>innerHTML<\/th>\r\n\t\t\t\t<th>id<\/th>\r\n\t\t\t<\/tr>\r\n\t\t<\/thead>\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>1<\/td>\r\n\t\t\t\t<td>btn1<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>2<\/td>\r\n\t\t\t\t<td>btn2<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>3<\/td>\r\n\t\t\t\t<td>btn3<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>4<\/td>\r\n\t\t\t\t<td>btn4<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>5<\/td>\r\n\t\t\t\t<td>btn5<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>6<\/td>\r\n\t\t\t\t<td>btn6<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>7<\/td>\r\n\t\t\t\t<td>btn7<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>8<\/td>\r\n\t\t\t\t<td>btn8<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>9<\/td>\r\n\t\t\t\t<td>btn9<\/td>\r\n\t\t\t<\/tr>\r\n\t\t<\/tbody>\r\n\t<\/table>\r\n\t<\/blockquote>\r\n\t<p>Sounds simple enough, right?  You essentially have a phone pad layout and when you \r\n\tclick the &#39;5&#39;, the other button texts rotate clockwise.  I immediately jumped in and\r\n\tset my html according to the spec:<\/p>\r\n\t<pre><code>{`\r\n<div id='btns' class='btns'>\r\n  <button class='btn' id='btn1'><span>1<\/span><\/button>\r\n  <button class='btn' id='btn2'><span>2<\/span><\/button>\r\n  <button class='btn' id='btn3'><span>3<\/span><\/button>\r\n  <button class='btn' id='btn4'><span>4<\/span><\/button>\r\n  <button class='btn' id='btn5'><span>5<\/span><\/button>\r\n  <button class='btn' id='btn6'><span>6<\/span><\/button>\r\n  <button class='btn' id='btn7'><span>7<\/span><\/button>\r\n  <button class='btn' id='btn8'><span>8<\/span><\/button>\r\n  <button class='btn' id='btn9'><span>9<\/span><\/button>\r\n<\/div>`}\r\n\t<\/code><\/pre>\r\n\t<p>I&#39;ve got my buttons, numbered 1 through 9 with corresponding ids.  Now I just need to \r\n\tattach a simple click listener to btn5 that will update the <code>.btn<\/code> class with a \r\n\t<code>transform: rotate(90deg)<\/code> on all the other buttons.  That way, I can handle the \r\n\trotation with pure CSS and my solution will be nice and JS-light:<\/p>\r\n\t<p>CSS:<\/p>`\r\n\t<pre><code>{`\r\n.btns {\r\n    width: 75%;\r\n}\r\n\r\n.btn {\r\n    width: 30%;\r\n    height: 48px;\r\n    font-size: 24px;\r\n}\r\n\r\n.btn > span {\r\n  display: inline-block;\r\n}`}\r\n\t<\/code><\/pre>\r\n\t<p>JS:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\nconst btns = document.querySelectorAll('button');\r\nlet rotation = 0;\r\n\r\nfunction rotateThem() {\r\n  rotation += 90;\r\n  btns.forEach(btn => {\r\n    if (btn.id !== 'btn5') {\r\n      btn.children[0].style = \\`transform: rotate($\\{rotation}deg)\\`;\r\n    }\r\n  });\r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<Pen \r\n\t\thash='boJoxB'\r\n\t\tuser='mattgaskey'\r\n\t\tdefaultTab='result'\r\n\t\/>\r\n\t<p>There!  That works beautifully!  Click the &#39;5&#39; and all the other numbers\r\n\trotate clockwise.  I was really proud of myself for jumping right in and\r\n\tcoding the thing from start to finish and getting a result with minimal\r\n\tGoogle-ing.  So I fire the code off for testing and...<\/p>\r\n\t<p>You probably guessed it long before this point in the story, FAIL!<\/p>\r\n\t<p>(<em>I did pass the CSS requirement, but that&#39;s small comfort when JS is the\r\n\tgoal<\/em>)<\/p>\r\n\t<h2 className='blog-header2' id='the-punch-line'>The Punch Line<\/h2>\r\n\t<p>How on Earth could I have failed?  There must have been something wrong with the testing module.  I mean, I did exactly what the task instructed me.  Click\r\n\tthe &#39;5&#39;, rotate all the others.  It does seem a bit inane of a task.  What&#39;s \r\n\tthe use in seeing a bunch of numbers spinning around in their little boxes\r\n\tanyway?<\/p>\r\n\t<p>I go back to the task, take a good look at what I should expect to see, and\r\n\tthe part of my brain responsible for involuntary reactions catches up with my\r\n\tvisual interpeter and lands my palm squarely against my forehead.<\/p>\r\n\t<p>One big &#39;happy accident&#39;.  Always read the instructions fully before beginning any\r\n\ttask.  Lesson number one from every grade starting in elementary school on\r\n\tthrough university.  Common sense.<\/p>\r\n\t<p>I&#39;m supposed to shift the number grid clockwise around the &#39;5&#39; when it&#39;s clicked.\r\n\tThat&#39;s a much more daunting task.  How the hell am I supposed to do that? I guess,\r\n\tit&#39;s back to the proverbial drawing board.<\/p>\r\n\t<p>At this point, my immature self would have given up.  I did a task that required not-so-elementary knowledge, used NodeLists, applied listeners, wrote functions, updated \r\n\tstyle with JavaScript; I even did it with ES6.  I think of Bob.  Bob says, &quot;Don&#39;t be \r\n\timmature. Remember, there are NO mistakes.&quot;<\/p>\r\n\t<p>You&#39;re right Bob.  Let&#39;s figure this thing out.  <\/p>\r\n\t<p>I&#39;ve already gotten a long way.  I succeeded in targeting a change in all the buttons\r\n\tother than the one that is clicked.  I can use that.  The structure is there, I just\r\n\tneed to redefine what change the function is affecting.<\/p>\r\n\t<p>First things first, I can get rid of those nested spans.  They were only there to act\r\n\tas containers to spin the text (you cannot rotate inline elements, hence the \r\n\t<code>display: inline-block<\/code>).  I should also consider what needs to happen onClick.  The innerHTML\r\n\tof the surrounding elements needs to change, leaving the ids in tact.  That means I can&#39;t\r\n\tupdate the <code>button<\/code> elements themselves.  <\/p>\r\n\t<p>The best way to approach this is going to be by dynamically inserting the innerHTML of each \r\n\telement and updating the data source when <code>btn5<\/code> is clicked.  That calls for an array.\r\n\tIt&#39;s probably also best to set a class on each changeable <code>button<\/code> element as well.  That\r\n\tgives us a new HTML markup:<\/p>\r\n\t<pre><code>{`\r\n<div id='btns' class='btns'>\r\n  <button class='btn rotating' id='btn1'><\/button>\r\n  <button class='btn rotating' id='btn2'><\/button>\r\n  <button class='btn rotating' id='btn3'><\/button>\r\n  <button class='btn rotating' id='btn4'><\/button>\r\n  <button class='btn' id='btn5'>5<\/button>\r\n  <button class='btn rotating' id='btn6'><\/button>\r\n  <button class='btn rotating' id='btn7'><\/button>\r\n  <button class='btn rotating' id='btn8'><\/button>\r\n  <button class='btn rotating' id='btn9'><\/button>\r\n<\/div>`}\r\n\t<\/code><\/pre>\r\n\t<p>Our CSS is unchanged.  We&#39;re still working with simple buttons.<\/p>\r\n\t<p>The JS has to be the star of the show now.  Our buttons no longer have any text.  We&#39;ve\r\n\tgot to write a function to loop over the HTML elements and set their <code>textContent<\/code> to the\r\n\tinitial values.  Plus we need an array of numbers to work from.<\/p>\r\n\t<pre><code>{`\r\n\/\/ use 'let' to initialize the variable, we're going\r\n\/\/ to be updating it as we rotate;\r\n\/\/ don't select btn5, it's value is\r\n\/\/ hard-coded in the HTML and won't change;\r\n\/\/ notice there is no '5' in the array either\r\n\r\nconst numbers = [1, 2, 3, 4, 6, 7, 8, 9];\r\nconst buttons = document.querySelectorAll('.rotating');\r\n\r\nfunction fillButtonContent(btn, i) {\r\n  btn.textContent = numbers[i];\r\n}\r\n\r\nbuttons.forEach((btn, i) => fillButtonContent(btn, i));`}\r\n\t<\/code><\/pre>\r\n\t<p>Our function is abstract, since we&#39;ll need to call it multiple times.  Initially\r\n\tthough, calling <code>fillButtonContent<\/code> will loop over our <code>button<\/code> nodes and set\r\n\ta number from the array at each index <code>i<\/code> to the innerHTML.  This will give us\r\n\tthe phone dial pad setup we&#39;re looking for.<\/p>\r\n\t<p>Next, we need to add our event listener and define our event handler, both of\r\n\twhich we accomplished in our happy little accident before. This time, we&#39;ll need\r\n\tto look closer at what our handler is doing:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\n\r\nfunction rotateThem() {\r\n  \/\/ Do something to the numbers array\r\n  buttons.forEach((btn, i) => fillButtonContent(btn, i)); \r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<p>The mechanism is in place; we just need to figure out how to properly manipulate\r\n\tour array so that the numbers move around the &#39;5&#39; in a clockwise fashion.  My first \r\n\tthought was to simply pop the last value off the end of the array and move it to the\r\n\tfront.  This does achieve a <strong>cyclic<\/strong> pattern, but since our HTML elements are arranged\r\n\tleft-to-right, top-to-bottom, we cannot achieve a <strong>circular<\/strong> pattern with a <strong>linear<\/strong>\r\n\tchange.<\/p>\r\n\t<p>In layman&#39;s terms, the first time we click, the &#39;3&#39; should move where the &#39;6&#39; is, but \r\n\tit moves where the &#39;4&#39; is.  I have an interesting mind, but not a beautiful one, so \r\n\tthe proper algorithm doesn&#39;t jump right out at me.  I need to model the effect in order to \r\n\tunderstand the pattern.<\/p>\r\n\t<p>So, what do we expect to see after clicking?  Here&#39;s the lowdown:<\/p>\r\n\t<pre><code className='markdown'>{`\r\nInitial State:\r\n| 1 | 2 | 3 |\r\n| 4 | 5 | 6 |\r\n| 7 | 8 | 9 |\r\n\r\nAfter First Click:\r\n| 4 | 1 | 2 |\r\n| 7 | 5 | 3 |\r\n| 8 | 9 | 6 |\r\n\r\nAfter Second Click:\r\n| 7 | 4 | 1 |\r\n| 8 | 5 | 2 |\r\n| 9 | 6 | 3 |`}\r\n\t<\/code><\/pre>\r\n\t<p>I don&#39;t believe I can write a formula to model this pattern, but I can write a function!\r\n\tFirst, I need to see if the expected permutations have any kind of pattern when we update our array.  That is, does each click result in the same kind of change in the array?<\/p>\r\n\t<p>Let&#39;s see:<\/p>\r\n\t<pre><code>{`\r\nnumbers = [1, 2, 3, 4, 6, 7, 8, 9]\r\nnumbers = [4, 1, 2, 7, 3, 8, 9, 6]\r\nnumbers = [7, 4, 1, 8, 2, 9, 6, 3]`}\r\n\t<\/code><\/pre>\r\n\t<p>It may not jump out at you right away, but the expected values in the array after each click\r\n\tdo in fact follow a pattern.  That means we can write a simple function that will change\r\n\tthe numbers array in such a way that calling <code>fillButtonContent<\/code> with the updated\r\n\tarray will make the numbers travel around the &#39;5&#39; in a clockwise fashion!<\/p>\r\n\t<p>Let&#39;s write that function:<\/p>\r\n\t<pre><code>{`\r\nfunction enterTheMatrix(arr) {\r\n  let newArr = [];\r\n  newArr.push(arr[3]);\r\n  newArr.push(arr[0]);\r\n  newArr.push(arr[1]);\r\n  newArr.push(arr[5]);\r\n  newArr.push(arr[2]);\r\n  newArr.push(arr[6]);\r\n  newArr.push(arr[7]);\r\n  newArr.push(arr[4]);\r\n  return newArr;\r\n}`}\r\n\t<\/code><\/pre>\r\n\t<p>The function <code>enterTheMatrix<\/code> takes in our numbers array, builds a placeholder array,\r\n\tpushes values from the original array to our placeholder array using the pattern we saw\r\n\tin our model, then returns the new array.<\/p>\r\n\t<p>Putting the whole thing together we get:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\nconst buttons = document.querySelectorAll('.rotating');\r\nlet numbers = [1, 2, 3, 4, 6, 7, 8, 9];\r\n\r\nbuttons.forEach((btn, i) => fillButtonContent(btn, i));\r\n\r\nfunction rotateThem() {\r\n  numbers = enterTheMatrix(numbers);\r\n  buttons.forEach((btn, i) => fillButtonContent(btn, i)); \r\n}\r\n\r\nfunction fillButtonContent(btn, i) {\r\n  btn.textContent = numbers[i];\r\n}\r\n\r\nfunction enterTheMatrix(arr) {\r\n  let newArr = [];\r\n  newArr.push(arr[3]);\r\n  newArr.push(arr[0]);\r\n  newArr.push(arr[1]);\r\n  newArr.push(arr[5]);\r\n  newArr.push(arr[2]);\r\n  newArr.push(arr[6]);\r\n  newArr.push(arr[7]);\r\n  newArr.push(arr[4]);\r\n  return newArr;\r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<p>On page load, the buttons which will rotate are assigned an innerHTML value\r\n\tfrom the numbers array. We target our <code>btn5<\/code> and attach a click listener \r\n\twhich fires the event handler <code>rotateThem<\/code>.  The event handler runs <code>enterTheMatrix<\/code>, which gives us a new array.  We use that array to run our\r\n\toriginal <code>fillButtonContent<\/code> to update the button texts.<\/p>\r\n\t<p>And that&#39;s it!<\/p>\r\n\t<Pen \r\n\t\thash='GMLOqN'\r\n\t\tuser='mattgaskey'\r\n\t\tdefaultTab='result'\r\n\t\/>\r\n\t<h2 className='blog-header2' id='what-did-we-learn-'>What did we learn?<\/h2>\r\n\t<p>Well, first off, the major takeaway from our happy accident was to make sure\r\n\tto <strong>always<\/strong> understand your task before starting.  It might feel like diving\r\n\tin and getting your hands dirty is the best way to accomplish anything, but \r\n\ttaking a few minutes to understand what you need to accomplish can save a lot\r\n\tof time and headache down the road.<\/p>\r\n\t<p>Second, learn from your mistakes.  You make them, but they can&#39;t break you if\r\n\tyou analyze what you&#39;ve done wrong.  That may mean re-reading the requirements,\r\n\tGoogle-ing for help, scrolling forums or asking co-workers (highly recommended,\r\n\tif you have them).  Own your mistakes and they will begin to feel like self-\r\n\tteaching moments.<\/p>\r\n\t<p>Third, don&#39;t scrap everything.  A lot of what developers do is pattern-based.  If\r\n\tyou focus on coding in patterns, you set yourself up with strong frameworks on\r\n\twhich you build your code.  Any mistakes you make therein can usually be\r\n\tcorrected without having to start over from scratch.  There is no need to \r\n\tabandon a strong foundation, just because you rushed some execution.<\/p>\r\n\t<p>Finally, Bob Ross is eternal.<\/p>\r\n<\/article>"
		},
		{
			"title" : "Happy Accidents", 
			"author" : "Matt Gaskey", 
			"date" : "10/22/2017", 
			"description" : "A blog post about turning stupid coding mistakes into smart solutions", 
			"keywords" : "JavaScript, front end development, HTML, CSS, functions, problem solving",
			"snippet" : "Jumping into the world of web development has provided many opprtunities to make mistakes.  This is not a field where memorizing theory will get you very far. You have to dig in and get your fingers dirty and code, code, code.  Luckily, the web is chock full of consequence-free environments where beginners can practice the fundamentals without fear of taking down an entire client website.",
			"content" : "<article>\r\n  <h1 className='blog-header' id='happy-accidents'><strong>Happy Accidents<\/strong><\/h1>\r\n\t<h2 className='blog-header2' id='the-back-story'>The Back-Story<\/h2>\r\n\t<p>I&#39;ve been re-watching a lot of episodes of the classic Bob Ross painting series\r\n\t<a href='https:\/\/www.youtube.com\/user\/BobRossInc'><em>The Joy of Painting<\/em><\/a> lately.  \r\n\tMaybe it&#39;s the stress and pressure of wanting\r\n\tto dive into web development at this stage in my life that makes me reach out\r\n\tfor something calming at the end of the work day.  Maybe I&#39;m just really into \r\n\thappy little trees and clouds.<\/p>\r\n\t<p>Or perhaps Bob is the one true source of knowledge and wisdom.  <\/p>\r\n\t<p>I am inclinded to doubt the latter, but one of his many mantras has stuck with \r\n\tme over the past few weeks.  To quote the guru:<\/p>\r\n\t<blockquote>\r\n\t<p>In our world, there are no mistakes, only happy accidents.<\/p>\r\n\t<\/blockquote>\r\n\t<p>Of course, Bob (and I feel comfortable continuing on a first-name basis with\r\n\thim) is referring to the ease with which errant strokes can be reincorporated into\r\n\tother elements with his wet-on-wet oil painting technique.  However, we all know\r\n\tthat Bob was really trying to tell us not to be afraid to take chances, to \r\n\tmake mistakes, and maybe more importantly, to own those mistakes.  We should \r\n\tsee mistakes as accidents, and accidents as points of inspiration.<\/p>\r\n\t<p>Jumping into the world of web development has provided many opprtunities to make\r\n\tmistakes.  This is not a field where memorizing theory will get you very far.\r\n\tYou have to dig in and get your fingers dirty and code, code, code.  Luckily, the\r\n\tweb is chock full of consequence-free environments where beginners can practice\r\n\tthe fundamentals without fear of taking down an entire client website.<\/p>\r\n\t<h2 className='blog-header2' id='the-set-up'>The Set Up<\/h2>\r\n\t<p><a href='https:\/\/hackerrank.com'>HackerRank.com<\/a> has a set of challenges that will\r\n\tlet you have all the happy little JavaScript accidents you like.  I went through\r\n\tthem in a day&#39;s time (90% of them are quite fundamental) and one particular\r\n\tchallenge caused a real-life face palm.  (For the younger generation out there, \r\n\tpeople used to actually slap themselves in the forehead when they made stupid\r\n\tmistakes instead of tweeting out gifs.)<\/p>\r\n\t<p>Here&#39;s the gist of the task:<\/p>\r\n\t<blockquote>\r\n\t<p>We want to create nine buttons enclosed in a div, laid out so they form a 3x3 grid. Each button has a distinct\r\n\tlabel from 1 to 9, and the labels on the outer buttons must rotate in the clockwise direction each time we click\r\n\tthe middle button. <\/p>\r\n\t<p>Each element in the document must have an id, [whose]  initial innerHTML labels must have the following button ids:<\/p>\r\n\t<table border='1'>\r\n\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t\t<th>innerHTML<\/th>\r\n\t\t\t\t<th>id<\/th>\r\n\t\t\t<\/tr>\r\n\t\t<\/thead>\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>1<\/td>\r\n\t\t\t\t<td>btn1<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>2<\/td>\r\n\t\t\t\t<td>btn2<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>3<\/td>\r\n\t\t\t\t<td>btn3<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>4<\/td>\r\n\t\t\t\t<td>btn4<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>5<\/td>\r\n\t\t\t\t<td>btn5<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>6<\/td>\r\n\t\t\t\t<td>btn6<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>7<\/td>\r\n\t\t\t\t<td>btn7<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>8<\/td>\r\n\t\t\t\t<td>btn8<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>9<\/td>\r\n\t\t\t\t<td>btn9<\/td>\r\n\t\t\t<\/tr>\r\n\t\t<\/tbody>\r\n\t<\/table>\r\n\t<\/blockquote>\r\n\t<p>Sounds simple enough, right?  You essentially have a phone pad layout and when you \r\n\tclick the &#39;5&#39;, the other button texts rotate clockwise.  I immediately jumped in and\r\n\tset my html according to the spec:<\/p>\r\n\t<pre><code>{`\r\n<div id='btns' class='btns'>\r\n  <button class='btn' id='btn1'><span>1<\/span><\/button>\r\n  <button class='btn' id='btn2'><span>2<\/span><\/button>\r\n  <button class='btn' id='btn3'><span>3<\/span><\/button>\r\n  <button class='btn' id='btn4'><span>4<\/span><\/button>\r\n  <button class='btn' id='btn5'><span>5<\/span><\/button>\r\n  <button class='btn' id='btn6'><span>6<\/span><\/button>\r\n  <button class='btn' id='btn7'><span>7<\/span><\/button>\r\n  <button class='btn' id='btn8'><span>8<\/span><\/button>\r\n  <button class='btn' id='btn9'><span>9<\/span><\/button>\r\n<\/div>`}\r\n\t<\/code><\/pre>\r\n\t<p>I&#39;ve got my buttons, numbered 1 through 9 with corresponding ids.  Now I just need to \r\n\tattach a simple click listener to btn5 that will update the <code>.btn<\/code> class with a \r\n\t<code>transform: rotate(90deg)<\/code> on all the other buttons.  That way, I can handle the \r\n\trotation with pure CSS and my solution will be nice and JS-light:<\/p>\r\n\t<p>CSS:<\/p>`\r\n\t<pre><code>{`\r\n.btns {\r\n    width: 75%;\r\n}\r\n\r\n.btn {\r\n    width: 30%;\r\n    height: 48px;\r\n    font-size: 24px;\r\n}\r\n\r\n.btn > span {\r\n  display: inline-block;\r\n}`}\r\n\t<\/code><\/pre>\r\n\t<p>JS:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\nconst btns = document.querySelectorAll('button');\r\nlet rotation = 0;\r\n\r\nfunction rotateThem() {\r\n  rotation += 90;\r\n  btns.forEach(btn => {\r\n    if (btn.id !== 'btn5') {\r\n      btn.children[0].style = \\`transform: rotate($\\{rotation}deg)\\`;\r\n    }\r\n  });\r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<Pen \r\n\t\thash='boJoxB'\r\n\t\tuser='mattgaskey'\r\n\t\tdefaultTab='result'\r\n\t\/>\r\n\t<p>There!  That works beautifully!  Click the &#39;5&#39; and all the other numbers\r\n\trotate clockwise.  I was really proud of myself for jumping right in and\r\n\tcoding the thing from start to finish and getting a result with minimal\r\n\tGoogle-ing.  So I fire the code off for testing and...<\/p>\r\n\t<p>You probably guessed it long before this point in the story, FAIL!<\/p>\r\n\t<p>(<em>I did pass the CSS requirement, but that&#39;s small comfort when JS is the\r\n\tgoal<\/em>)<\/p>\r\n\t<h2 className='blog-header2' id='the-punch-line'>The Punch Line<\/h2>\r\n\t<p>How on Earth could I have failed?  There must have been something wrong with the testing module.  I mean, I did exactly what the task instructed me.  Click\r\n\tthe &#39;5&#39;, rotate all the others.  It does seem a bit inane of a task.  What&#39;s \r\n\tthe use in seeing a bunch of numbers spinning around in their little boxes\r\n\tanyway?<\/p>\r\n\t<p>I go back to the task, take a good look at what I should expect to see, and\r\n\tthe part of my brain responsible for involuntary reactions catches up with my\r\n\tvisual interpeter and lands my palm squarely against my forehead.<\/p>\r\n\t<p>One big &#39;happy accident&#39;.  Always read the instructions fully before beginning any\r\n\ttask.  Lesson number one from every grade starting in elementary school on\r\n\tthrough university.  Common sense.<\/p>\r\n\t<p>I&#39;m supposed to shift the number grid clockwise around the &#39;5&#39; when it&#39;s clicked.\r\n\tThat&#39;s a much more daunting task.  How the hell am I supposed to do that? I guess,\r\n\tit&#39;s back to the proverbial drawing board.<\/p>\r\n\t<p>At this point, my immature self would have given up.  I did a task that required not-so-elementary knowledge, used NodeLists, applied listeners, wrote functions, updated \r\n\tstyle with JavaScript; I even did it with ES6.  I think of Bob.  Bob says, &quot;Don&#39;t be \r\n\timmature. Remember, there are NO mistakes.&quot;<\/p>\r\n\t<p>You&#39;re right Bob.  Let&#39;s figure this thing out.  <\/p>\r\n\t<p>I&#39;ve already gotten a long way.  I succeeded in targeting a change in all the buttons\r\n\tother than the one that is clicked.  I can use that.  The structure is there, I just\r\n\tneed to redefine what change the function is affecting.<\/p>\r\n\t<p>First things first, I can get rid of those nested spans.  They were only there to act\r\n\tas containers to spin the text (you cannot rotate inline elements, hence the \r\n\t<code>display: inline-block<\/code>).  I should also consider what needs to happen onClick.  The innerHTML\r\n\tof the surrounding elements needs to change, leaving the ids in tact.  That means I can&#39;t\r\n\tupdate the <code>button<\/code> elements themselves.  <\/p>\r\n\t<p>The best way to approach this is going to be by dynamically inserting the innerHTML of each \r\n\telement and updating the data source when <code>btn5<\/code> is clicked.  That calls for an array.\r\n\tIt&#39;s probably also best to set a class on each changeable <code>button<\/code> element as well.  That\r\n\tgives us a new HTML markup:<\/p>\r\n\t<pre><code>{`\r\n<div id='btns' class='btns'>\r\n  <button class='btn rotating' id='btn1'><\/button>\r\n  <button class='btn rotating' id='btn2'><\/button>\r\n  <button class='btn rotating' id='btn3'><\/button>\r\n  <button class='btn rotating' id='btn4'><\/button>\r\n  <button class='btn' id='btn5'>5<\/button>\r\n  <button class='btn rotating' id='btn6'><\/button>\r\n  <button class='btn rotating' id='btn7'><\/button>\r\n  <button class='btn rotating' id='btn8'><\/button>\r\n  <button class='btn rotating' id='btn9'><\/button>\r\n<\/div>`}\r\n\t<\/code><\/pre>\r\n\t<p>Our CSS is unchanged.  We&#39;re still working with simple buttons.<\/p>\r\n\t<p>The JS has to be the star of the show now.  Our buttons no longer have any text.  We&#39;ve\r\n\tgot to write a function to loop over the HTML elements and set their <code>textContent<\/code> to the\r\n\tinitial values.  Plus we need an array of numbers to work from.<\/p>\r\n\t<pre><code>{`\r\n\/\/ use 'let' to initialize the variable, we're going\r\n\/\/ to be updating it as we rotate;\r\n\/\/ don't select btn5, it's value is\r\n\/\/ hard-coded in the HTML and won't change;\r\n\/\/ notice there is no '5' in the array either\r\n\r\nconst numbers = [1, 2, 3, 4, 6, 7, 8, 9];\r\nconst buttons = document.querySelectorAll('.rotating');\r\n\r\nfunction fillButtonContent(btn, i) {\r\n  btn.textContent = numbers[i];\r\n}\r\n\r\nbuttons.forEach((btn, i) => fillButtonContent(btn, i));`}\r\n\t<\/code><\/pre>\r\n\t<p>Our function is abstract, since we&#39;ll need to call it multiple times.  Initially\r\n\tthough, calling <code>fillButtonContent<\/code> will loop over our <code>button<\/code> nodes and set\r\n\ta number from the array at each index <code>i<\/code> to the innerHTML.  This will give us\r\n\tthe phone dial pad setup we&#39;re looking for.<\/p>\r\n\t<p>Next, we need to add our event listener and define our event handler, both of\r\n\twhich we accomplished in our happy little accident before. This time, we&#39;ll need\r\n\tto look closer at what our handler is doing:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\n\r\nfunction rotateThem() {\r\n  \/\/ Do something to the numbers array\r\n  buttons.forEach((btn, i) => fillButtonContent(btn, i)); \r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<p>The mechanism is in place; we just need to figure out how to properly manipulate\r\n\tour array so that the numbers move around the &#39;5&#39; in a clockwise fashion.  My first \r\n\tthought was to simply pop the last value off the end of the array and move it to the\r\n\tfront.  This does achieve a <strong>cyclic<\/strong> pattern, but since our HTML elements are arranged\r\n\tleft-to-right, top-to-bottom, we cannot achieve a <strong>circular<\/strong> pattern with a <strong>linear<\/strong>\r\n\tchange.<\/p>\r\n\t<p>In layman&#39;s terms, the first time we click, the &#39;3&#39; should move where the &#39;6&#39; is, but \r\n\tit moves where the &#39;4&#39; is.  I have an interesting mind, but not a beautiful one, so \r\n\tthe proper algorithm doesn&#39;t jump right out at me.  I need to model the effect in order to \r\n\tunderstand the pattern.<\/p>\r\n\t<p>So, what do we expect to see after clicking?  Here&#39;s the lowdown:<\/p>\r\n\t<pre><code className='markdown'>{`\r\nInitial State:\r\n| 1 | 2 | 3 |\r\n| 4 | 5 | 6 |\r\n| 7 | 8 | 9 |\r\n\r\nAfter First Click:\r\n| 4 | 1 | 2 |\r\n| 7 | 5 | 3 |\r\n| 8 | 9 | 6 |\r\n\r\nAfter Second Click:\r\n| 7 | 4 | 1 |\r\n| 8 | 5 | 2 |\r\n| 9 | 6 | 3 |`}\r\n\t<\/code><\/pre>\r\n\t<p>I don&#39;t believe I can write a formula to model this pattern, but I can write a function!\r\n\tFirst, I need to see if the expected permutations have any kind of pattern when we update our array.  That is, does each click result in the same kind of change in the array?<\/p>\r\n\t<p>Let&#39;s see:<\/p>\r\n\t<pre><code>{`\r\nnumbers = [1, 2, 3, 4, 6, 7, 8, 9]\r\nnumbers = [4, 1, 2, 7, 3, 8, 9, 6]\r\nnumbers = [7, 4, 1, 8, 2, 9, 6, 3]`}\r\n\t<\/code><\/pre>\r\n\t<p>It may not jump out at you right away, but the expected values in the array after each click\r\n\tdo in fact follow a pattern.  That means we can write a simple function that will change\r\n\tthe numbers array in such a way that calling <code>fillButtonContent<\/code> with the updated\r\n\tarray will make the numbers travel around the &#39;5&#39; in a clockwise fashion!<\/p>\r\n\t<p>Let&#39;s write that function:<\/p>\r\n\t<pre><code>{`\r\nfunction enterTheMatrix(arr) {\r\n  let newArr = [];\r\n  newArr.push(arr[3]);\r\n  newArr.push(arr[0]);\r\n  newArr.push(arr[1]);\r\n  newArr.push(arr[5]);\r\n  newArr.push(arr[2]);\r\n  newArr.push(arr[6]);\r\n  newArr.push(arr[7]);\r\n  newArr.push(arr[4]);\r\n  return newArr;\r\n}`}\r\n\t<\/code><\/pre>\r\n\t<p>The function <code>enterTheMatrix<\/code> takes in our numbers array, builds a placeholder array,\r\n\tpushes values from the original array to our placeholder array using the pattern we saw\r\n\tin our model, then returns the new array.<\/p>\r\n\t<p>Putting the whole thing together we get:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\nconst buttons = document.querySelectorAll('.rotating');\r\nlet numbers = [1, 2, 3, 4, 6, 7, 8, 9];\r\n\r\nbuttons.forEach((btn, i) => fillButtonContent(btn, i));\r\n\r\nfunction rotateThem() {\r\n  numbers = enterTheMatrix(numbers);\r\n  buttons.forEach((btn, i) => fillButtonContent(btn, i)); \r\n}\r\n\r\nfunction fillButtonContent(btn, i) {\r\n  btn.textContent = numbers[i];\r\n}\r\n\r\nfunction enterTheMatrix(arr) {\r\n  let newArr = [];\r\n  newArr.push(arr[3]);\r\n  newArr.push(arr[0]);\r\n  newArr.push(arr[1]);\r\n  newArr.push(arr[5]);\r\n  newArr.push(arr[2]);\r\n  newArr.push(arr[6]);\r\n  newArr.push(arr[7]);\r\n  newArr.push(arr[4]);\r\n  return newArr;\r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<p>On page load, the buttons which will rotate are assigned an innerHTML value\r\n\tfrom the numbers array. We target our <code>btn5<\/code> and attach a click listener \r\n\twhich fires the event handler <code>rotateThem<\/code>.  The event handler runs <code>enterTheMatrix<\/code>, which gives us a new array.  We use that array to run our\r\n\toriginal <code>fillButtonContent<\/code> to update the button texts.<\/p>\r\n\t<p>And that&#39;s it!<\/p>\r\n\t<Pen \r\n\t\thash='GMLOqN'\r\n\t\tuser='mattgaskey'\r\n\t\tdefaultTab='result'\r\n\t\/>\r\n\t<h2 className='blog-header2' id='what-did-we-learn-'>What did we learn?<\/h2>\r\n\t<p>Well, first off, the major takeaway from our happy accident was to make sure\r\n\tto <strong>always<\/strong> understand your task before starting.  It might feel like diving\r\n\tin and getting your hands dirty is the best way to accomplish anything, but \r\n\ttaking a few minutes to understand what you need to accomplish can save a lot\r\n\tof time and headache down the road.<\/p>\r\n\t<p>Second, learn from your mistakes.  You make them, but they can&#39;t break you if\r\n\tyou analyze what you&#39;ve done wrong.  That may mean re-reading the requirements,\r\n\tGoogle-ing for help, scrolling forums or asking co-workers (highly recommended,\r\n\tif you have them).  Own your mistakes and they will begin to feel like self-\r\n\tteaching moments.<\/p>\r\n\t<p>Third, don&#39;t scrap everything.  A lot of what developers do is pattern-based.  If\r\n\tyou focus on coding in patterns, you set yourself up with strong frameworks on\r\n\twhich you build your code.  Any mistakes you make therein can usually be\r\n\tcorrected without having to start over from scratch.  There is no need to \r\n\tabandon a strong foundation, just because you rushed some execution.<\/p>\r\n\t<p>Finally, Bob Ross is eternal.<\/p>\r\n<\/article>"
		},
		{
			"title" : "Happy Accidents", 
			"author" : "Matt Gaskey", 
			"date" : "10/22/2017", 
			"description" : "A blog post about turning stupid coding mistakes into smart solutions", 
			"keywords" : "JavaScript, front end development, HTML, CSS, functions, problem solving",
			"snippet" : "Jumping into the world of web development has provided many opprtunities to make mistakes.  This is not a field where memorizing theory will get you very far. You have to dig in and get your fingers dirty and code, code, code.  Luckily, the web is chock full of consequence-free environments where beginners can practice the fundamentals without fear of taking down an entire client website.",
			"content" : "<article>\r\n  <h1 className='blog-header' id='happy-accidents'><strong>Happy Accidents<\/strong><\/h1>\r\n\t<h2 className='blog-header2' id='the-back-story'>The Back-Story<\/h2>\r\n\t<p>I&#39;ve been re-watching a lot of episodes of the classic Bob Ross painting series\r\n\t<a href='https:\/\/www.youtube.com\/user\/BobRossInc'><em>The Joy of Painting<\/em><\/a> lately.  \r\n\tMaybe it&#39;s the stress and pressure of wanting\r\n\tto dive into web development at this stage in my life that makes me reach out\r\n\tfor something calming at the end of the work day.  Maybe I&#39;m just really into \r\n\thappy little trees and clouds.<\/p>\r\n\t<p>Or perhaps Bob is the one true source of knowledge and wisdom.  <\/p>\r\n\t<p>I am inclinded to doubt the latter, but one of his many mantras has stuck with \r\n\tme over the past few weeks.  To quote the guru:<\/p>\r\n\t<blockquote>\r\n\t<p>In our world, there are no mistakes, only happy accidents.<\/p>\r\n\t<\/blockquote>\r\n\t<p>Of course, Bob (and I feel comfortable continuing on a first-name basis with\r\n\thim) is referring to the ease with which errant strokes can be reincorporated into\r\n\tother elements with his wet-on-wet oil painting technique.  However, we all know\r\n\tthat Bob was really trying to tell us not to be afraid to take chances, to \r\n\tmake mistakes, and maybe more importantly, to own those mistakes.  We should \r\n\tsee mistakes as accidents, and accidents as points of inspiration.<\/p>\r\n\t<p>Jumping into the world of web development has provided many opprtunities to make\r\n\tmistakes.  This is not a field where memorizing theory will get you very far.\r\n\tYou have to dig in and get your fingers dirty and code, code, code.  Luckily, the\r\n\tweb is chock full of consequence-free environments where beginners can practice\r\n\tthe fundamentals without fear of taking down an entire client website.<\/p>\r\n\t<h2 className='blog-header2' id='the-set-up'>The Set Up<\/h2>\r\n\t<p><a href='https:\/\/hackerrank.com'>HackerRank.com<\/a> has a set of challenges that will\r\n\tlet you have all the happy little JavaScript accidents you like.  I went through\r\n\tthem in a day&#39;s time (90% of them are quite fundamental) and one particular\r\n\tchallenge caused a real-life face palm.  (For the younger generation out there, \r\n\tpeople used to actually slap themselves in the forehead when they made stupid\r\n\tmistakes instead of tweeting out gifs.)<\/p>\r\n\t<p>Here&#39;s the gist of the task:<\/p>\r\n\t<blockquote>\r\n\t<p>We want to create nine buttons enclosed in a div, laid out so they form a 3x3 grid. Each button has a distinct\r\n\tlabel from 1 to 9, and the labels on the outer buttons must rotate in the clockwise direction each time we click\r\n\tthe middle button. <\/p>\r\n\t<p>Each element in the document must have an id, [whose]  initial innerHTML labels must have the following button ids:<\/p>\r\n\t<table border='1'>\r\n\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t\t<th>innerHTML<\/th>\r\n\t\t\t\t<th>id<\/th>\r\n\t\t\t<\/tr>\r\n\t\t<\/thead>\r\n\t\t<tbody>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>1<\/td>\r\n\t\t\t\t<td>btn1<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>2<\/td>\r\n\t\t\t\t<td>btn2<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>3<\/td>\r\n\t\t\t\t<td>btn3<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>4<\/td>\r\n\t\t\t\t<td>btn4<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>5<\/td>\r\n\t\t\t\t<td>btn5<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>6<\/td>\r\n\t\t\t\t<td>btn6<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>7<\/td>\r\n\t\t\t\t<td>btn7<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>8<\/td>\r\n\t\t\t\t<td>btn8<\/td>\r\n\t\t\t<\/tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td>9<\/td>\r\n\t\t\t\t<td>btn9<\/td>\r\n\t\t\t<\/tr>\r\n\t\t<\/tbody>\r\n\t<\/table>\r\n\t<\/blockquote>\r\n\t<p>Sounds simple enough, right?  You essentially have a phone pad layout and when you \r\n\tclick the &#39;5&#39;, the other button texts rotate clockwise.  I immediately jumped in and\r\n\tset my html according to the spec:<\/p>\r\n\t<pre><code>{`\r\n<div id='btns' class='btns'>\r\n  <button class='btn' id='btn1'><span>1<\/span><\/button>\r\n  <button class='btn' id='btn2'><span>2<\/span><\/button>\r\n  <button class='btn' id='btn3'><span>3<\/span><\/button>\r\n  <button class='btn' id='btn4'><span>4<\/span><\/button>\r\n  <button class='btn' id='btn5'><span>5<\/span><\/button>\r\n  <button class='btn' id='btn6'><span>6<\/span><\/button>\r\n  <button class='btn' id='btn7'><span>7<\/span><\/button>\r\n  <button class='btn' id='btn8'><span>8<\/span><\/button>\r\n  <button class='btn' id='btn9'><span>9<\/span><\/button>\r\n<\/div>`}\r\n\t<\/code><\/pre>\r\n\t<p>I&#39;ve got my buttons, numbered 1 through 9 with corresponding ids.  Now I just need to \r\n\tattach a simple click listener to btn5 that will update the <code>.btn<\/code> class with a \r\n\t<code>transform: rotate(90deg)<\/code> on all the other buttons.  That way, I can handle the \r\n\trotation with pure CSS and my solution will be nice and JS-light:<\/p>\r\n\t<p>CSS:<\/p>`\r\n\t<pre><code>{`\r\n.btns {\r\n    width: 75%;\r\n}\r\n\r\n.btn {\r\n    width: 30%;\r\n    height: 48px;\r\n    font-size: 24px;\r\n}\r\n\r\n.btn > span {\r\n  display: inline-block;\r\n}`}\r\n\t<\/code><\/pre>\r\n\t<p>JS:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\nconst btns = document.querySelectorAll('button');\r\nlet rotation = 0;\r\n\r\nfunction rotateThem() {\r\n  rotation += 90;\r\n  btns.forEach(btn => {\r\n    if (btn.id !== 'btn5') {\r\n      btn.children[0].style = \\`transform: rotate($\\{rotation}deg)\\`;\r\n    }\r\n  });\r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<Pen \r\n\t\thash='boJoxB'\r\n\t\tuser='mattgaskey'\r\n\t\tdefaultTab='result'\r\n\t\/>\r\n\t<p>There!  That works beautifully!  Click the &#39;5&#39; and all the other numbers\r\n\trotate clockwise.  I was really proud of myself for jumping right in and\r\n\tcoding the thing from start to finish and getting a result with minimal\r\n\tGoogle-ing.  So I fire the code off for testing and...<\/p>\r\n\t<p>You probably guessed it long before this point in the story, FAIL!<\/p>\r\n\t<p>(<em>I did pass the CSS requirement, but that&#39;s small comfort when JS is the\r\n\tgoal<\/em>)<\/p>\r\n\t<h2 className='blog-header2' id='the-punch-line'>The Punch Line<\/h2>\r\n\t<p>How on Earth could I have failed?  There must have been something wrong with the testing module.  I mean, I did exactly what the task instructed me.  Click\r\n\tthe &#39;5&#39;, rotate all the others.  It does seem a bit inane of a task.  What&#39;s \r\n\tthe use in seeing a bunch of numbers spinning around in their little boxes\r\n\tanyway?<\/p>\r\n\t<p>I go back to the task, take a good look at what I should expect to see, and\r\n\tthe part of my brain responsible for involuntary reactions catches up with my\r\n\tvisual interpeter and lands my palm squarely against my forehead.<\/p>\r\n\t<p>One big &#39;happy accident&#39;.  Always read the instructions fully before beginning any\r\n\ttask.  Lesson number one from every grade starting in elementary school on\r\n\tthrough university.  Common sense.<\/p>\r\n\t<p>I&#39;m supposed to shift the number grid clockwise around the &#39;5&#39; when it&#39;s clicked.\r\n\tThat&#39;s a much more daunting task.  How the hell am I supposed to do that? I guess,\r\n\tit&#39;s back to the proverbial drawing board.<\/p>\r\n\t<p>At this point, my immature self would have given up.  I did a task that required not-so-elementary knowledge, used NodeLists, applied listeners, wrote functions, updated \r\n\tstyle with JavaScript; I even did it with ES6.  I think of Bob.  Bob says, &quot;Don&#39;t be \r\n\timmature. Remember, there are NO mistakes.&quot;<\/p>\r\n\t<p>You&#39;re right Bob.  Let&#39;s figure this thing out.  <\/p>\r\n\t<p>I&#39;ve already gotten a long way.  I succeeded in targeting a change in all the buttons\r\n\tother than the one that is clicked.  I can use that.  The structure is there, I just\r\n\tneed to redefine what change the function is affecting.<\/p>\r\n\t<p>First things first, I can get rid of those nested spans.  They were only there to act\r\n\tas containers to spin the text (you cannot rotate inline elements, hence the \r\n\t<code>display: inline-block<\/code>).  I should also consider what needs to happen onClick.  The innerHTML\r\n\tof the surrounding elements needs to change, leaving the ids in tact.  That means I can&#39;t\r\n\tupdate the <code>button<\/code> elements themselves.  <\/p>\r\n\t<p>The best way to approach this is going to be by dynamically inserting the innerHTML of each \r\n\telement and updating the data source when <code>btn5<\/code> is clicked.  That calls for an array.\r\n\tIt&#39;s probably also best to set a class on each changeable <code>button<\/code> element as well.  That\r\n\tgives us a new HTML markup:<\/p>\r\n\t<pre><code>{`\r\n<div id='btns' class='btns'>\r\n  <button class='btn rotating' id='btn1'><\/button>\r\n  <button class='btn rotating' id='btn2'><\/button>\r\n  <button class='btn rotating' id='btn3'><\/button>\r\n  <button class='btn rotating' id='btn4'><\/button>\r\n  <button class='btn' id='btn5'>5<\/button>\r\n  <button class='btn rotating' id='btn6'><\/button>\r\n  <button class='btn rotating' id='btn7'><\/button>\r\n  <button class='btn rotating' id='btn8'><\/button>\r\n  <button class='btn rotating' id='btn9'><\/button>\r\n<\/div>`}\r\n\t<\/code><\/pre>\r\n\t<p>Our CSS is unchanged.  We&#39;re still working with simple buttons.<\/p>\r\n\t<p>The JS has to be the star of the show now.  Our buttons no longer have any text.  We&#39;ve\r\n\tgot to write a function to loop over the HTML elements and set their <code>textContent<\/code> to the\r\n\tinitial values.  Plus we need an array of numbers to work from.<\/p>\r\n\t<pre><code>{`\r\n\/\/ use 'let' to initialize the variable, we're going\r\n\/\/ to be updating it as we rotate;\r\n\/\/ don't select btn5, it's value is\r\n\/\/ hard-coded in the HTML and won't change;\r\n\/\/ notice there is no '5' in the array either\r\n\r\nconst numbers = [1, 2, 3, 4, 6, 7, 8, 9];\r\nconst buttons = document.querySelectorAll('.rotating');\r\n\r\nfunction fillButtonContent(btn, i) {\r\n  btn.textContent = numbers[i];\r\n}\r\n\r\nbuttons.forEach((btn, i) => fillButtonContent(btn, i));`}\r\n\t<\/code><\/pre>\r\n\t<p>Our function is abstract, since we&#39;ll need to call it multiple times.  Initially\r\n\tthough, calling <code>fillButtonContent<\/code> will loop over our <code>button<\/code> nodes and set\r\n\ta number from the array at each index <code>i<\/code> to the innerHTML.  This will give us\r\n\tthe phone dial pad setup we&#39;re looking for.<\/p>\r\n\t<p>Next, we need to add our event listener and define our event handler, both of\r\n\twhich we accomplished in our happy little accident before. This time, we&#39;ll need\r\n\tto look closer at what our handler is doing:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\n\r\nfunction rotateThem() {\r\n  \/\/ Do something to the numbers array\r\n  buttons.forEach((btn, i) => fillButtonContent(btn, i)); \r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<p>The mechanism is in place; we just need to figure out how to properly manipulate\r\n\tour array so that the numbers move around the &#39;5&#39; in a clockwise fashion.  My first \r\n\tthought was to simply pop the last value off the end of the array and move it to the\r\n\tfront.  This does achieve a <strong>cyclic<\/strong> pattern, but since our HTML elements are arranged\r\n\tleft-to-right, top-to-bottom, we cannot achieve a <strong>circular<\/strong> pattern with a <strong>linear<\/strong>\r\n\tchange.<\/p>\r\n\t<p>In layman&#39;s terms, the first time we click, the &#39;3&#39; should move where the &#39;6&#39; is, but \r\n\tit moves where the &#39;4&#39; is.  I have an interesting mind, but not a beautiful one, so \r\n\tthe proper algorithm doesn&#39;t jump right out at me.  I need to model the effect in order to \r\n\tunderstand the pattern.<\/p>\r\n\t<p>So, what do we expect to see after clicking?  Here&#39;s the lowdown:<\/p>\r\n\t<pre><code className='markdown'>{`\r\nInitial State:\r\n| 1 | 2 | 3 |\r\n| 4 | 5 | 6 |\r\n| 7 | 8 | 9 |\r\n\r\nAfter First Click:\r\n| 4 | 1 | 2 |\r\n| 7 | 5 | 3 |\r\n| 8 | 9 | 6 |\r\n\r\nAfter Second Click:\r\n| 7 | 4 | 1 |\r\n| 8 | 5 | 2 |\r\n| 9 | 6 | 3 |`}\r\n\t<\/code><\/pre>\r\n\t<p>I don&#39;t believe I can write a formula to model this pattern, but I can write a function!\r\n\tFirst, I need to see if the expected permutations have any kind of pattern when we update our array.  That is, does each click result in the same kind of change in the array?<\/p>\r\n\t<p>Let&#39;s see:<\/p>\r\n\t<pre><code>{`\r\nnumbers = [1, 2, 3, 4, 6, 7, 8, 9]\r\nnumbers = [4, 1, 2, 7, 3, 8, 9, 6]\r\nnumbers = [7, 4, 1, 8, 2, 9, 6, 3]`}\r\n\t<\/code><\/pre>\r\n\t<p>It may not jump out at you right away, but the expected values in the array after each click\r\n\tdo in fact follow a pattern.  That means we can write a simple function that will change\r\n\tthe numbers array in such a way that calling <code>fillButtonContent<\/code> with the updated\r\n\tarray will make the numbers travel around the &#39;5&#39; in a clockwise fashion!<\/p>\r\n\t<p>Let&#39;s write that function:<\/p>\r\n\t<pre><code>{`\r\nfunction enterTheMatrix(arr) {\r\n  let newArr = [];\r\n  newArr.push(arr[3]);\r\n  newArr.push(arr[0]);\r\n  newArr.push(arr[1]);\r\n  newArr.push(arr[5]);\r\n  newArr.push(arr[2]);\r\n  newArr.push(arr[6]);\r\n  newArr.push(arr[7]);\r\n  newArr.push(arr[4]);\r\n  return newArr;\r\n}`}\r\n\t<\/code><\/pre>\r\n\t<p>The function <code>enterTheMatrix<\/code> takes in our numbers array, builds a placeholder array,\r\n\tpushes values from the original array to our placeholder array using the pattern we saw\r\n\tin our model, then returns the new array.<\/p>\r\n\t<p>Putting the whole thing together we get:<\/p>\r\n\t<pre><code>{`\r\nconst btn5 = document.querySelector('#btn5');\r\nconst buttons = document.querySelectorAll('.rotating');\r\nlet numbers = [1, 2, 3, 4, 6, 7, 8, 9];\r\n\r\nbuttons.forEach((btn, i) => fillButtonContent(btn, i));\r\n\r\nfunction rotateThem() {\r\n  numbers = enterTheMatrix(numbers);\r\n  buttons.forEach((btn, i) => fillButtonContent(btn, i)); \r\n}\r\n\r\nfunction fillButtonContent(btn, i) {\r\n  btn.textContent = numbers[i];\r\n}\r\n\r\nfunction enterTheMatrix(arr) {\r\n  let newArr = [];\r\n  newArr.push(arr[3]);\r\n  newArr.push(arr[0]);\r\n  newArr.push(arr[1]);\r\n  newArr.push(arr[5]);\r\n  newArr.push(arr[2]);\r\n  newArr.push(arr[6]);\r\n  newArr.push(arr[7]);\r\n  newArr.push(arr[4]);\r\n  return newArr;\r\n}\r\n\r\nbtn5.addEventListener('click', rotateThem);`}\r\n\t<\/code><\/pre>\r\n\t<p>On page load, the buttons which will rotate are assigned an innerHTML value\r\n\tfrom the numbers array. We target our <code>btn5<\/code> and attach a click listener \r\n\twhich fires the event handler <code>rotateThem<\/code>.  The event handler runs <code>enterTheMatrix<\/code>, which gives us a new array.  We use that array to run our\r\n\toriginal <code>fillButtonContent<\/code> to update the button texts.<\/p>\r\n\t<p>And that&#39;s it!<\/p>\r\n\t<Pen \r\n\t\thash='GMLOqN'\r\n\t\tuser='mattgaskey'\r\n\t\tdefaultTab='result'\r\n\t\/>\r\n\t<h2 className='blog-header2' id='what-did-we-learn-'>What did we learn?<\/h2>\r\n\t<p>Well, first off, the major takeaway from our happy accident was to make sure\r\n\tto <strong>always<\/strong> understand your task before starting.  It might feel like diving\r\n\tin and getting your hands dirty is the best way to accomplish anything, but \r\n\ttaking a few minutes to understand what you need to accomplish can save a lot\r\n\tof time and headache down the road.<\/p>\r\n\t<p>Second, learn from your mistakes.  You make them, but they can&#39;t break you if\r\n\tyou analyze what you&#39;ve done wrong.  That may mean re-reading the requirements,\r\n\tGoogle-ing for help, scrolling forums or asking co-workers (highly recommended,\r\n\tif you have them).  Own your mistakes and they will begin to feel like self-\r\n\tteaching moments.<\/p>\r\n\t<p>Third, don&#39;t scrap everything.  A lot of what developers do is pattern-based.  If\r\n\tyou focus on coding in patterns, you set yourself up with strong frameworks on\r\n\twhich you build your code.  Any mistakes you make therein can usually be\r\n\tcorrected without having to start over from scratch.  There is no need to \r\n\tabandon a strong foundation, just because you rushed some execution.<\/p>\r\n\t<p>Finally, Bob Ross is eternal.<\/p>\r\n<\/article>"
		}
	]
}